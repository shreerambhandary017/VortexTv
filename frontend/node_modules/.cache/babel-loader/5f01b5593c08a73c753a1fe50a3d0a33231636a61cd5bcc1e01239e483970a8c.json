{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useLoading } from '../context/LoadingContext';\nimport { useAuth } from '../context/AuthContext';\nimport config, { getApiUrl } from '../utils/config';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: config.apiBaseUrl,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: config.authTimeout / 3 // Default timeout is 1/3 of auth timeout\n});\n\n/**\r\n * Custom hook that returns API methods with automatic loading state management\r\n * and error handling\r\n */\nexport const useApi = () => {\n  _s();\n  const {\n    startLoading,\n    stopLoading\n  } = useLoading();\n  const {\n    token,\n    logout,\n    refreshToken\n  } = useAuth();\n\n  // Configure request interceptor\n  apiClient.interceptors.request.use(config => {\n    // Add auth token if available\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Configure response interceptor\n  apiClient.interceptors.response.use(response => response, async error => {\n    const originalRequest = error.config;\n\n    // Handle token expiration (401)\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n      try {\n        // Try to refresh the token\n        const success = await refreshToken();\n        if (success) {\n          // Set new token in the request\n          originalRequest.headers.Authorization = `Bearer ${token}`;\n          // Retry the original request\n          return apiClient(originalRequest);\n        } else {\n          // If refresh failed, logout\n          logout();\n        }\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n        logout();\n      }\n    }\n    return Promise.reject(error);\n  });\n\n  // Log requests in debug mode\n  if (config.debug) {\n    apiClient.interceptors.request.use(request => {\n      var _request$method;\n      console.log('🚀 API Request:', (_request$method = request.method) === null || _request$method === void 0 ? void 0 : _request$method.toUpperCase(), request.url, request);\n      return request;\n    });\n    apiClient.interceptors.response.use(response => {\n      console.log('✅ API Response:', response.status, response.config.url, response);\n      return response;\n    }, error => {\n      var _error$response, _error$config;\n      console.error('❌ API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 'Network Error', (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url, error.response || error);\n      return Promise.reject(error);\n    });\n  }\n\n  /**\r\n   * Make an API request with automatic loading state\r\n   * @param {Object} options - Request options\r\n   * @param {string} options.url - The endpoint URL\r\n   * @param {string} options.method - HTTP method (get, post, put, delete)\r\n   * @param {Object} options.data - Request payload \r\n   * @param {string} options.loadingMessage - Custom loading message\r\n   * @param {boolean} options.showLoading - Whether to show loading indicator\r\n   * @returns {Promise} - Result of the API call\r\n   */\n  const request = async ({\n    url,\n    method = 'get',\n    data = null,\n    params = null,\n    loadingMessage = 'Loading...',\n    showLoading = true\n  }) => {\n    try {\n      if (showLoading) {\n        startLoading(loadingMessage);\n      }\n\n      // Convert relative URLs to full API URLs\n      const apiUrl = url.startsWith('http') ? url : getApiUrl(url);\n      const response = await apiClient({\n        url: apiUrl,\n        method,\n        data,\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('API Error:', error);\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'An unexpected error occurred';\n      throw new Error(errorMessage);\n    } finally {\n      if (showLoading) {\n        stopLoading();\n      }\n    }\n  };\n\n  // Convenience methods\n  return {\n    get: (url, options = {}) => request({\n      url,\n      method: 'get',\n      ...options\n    }),\n    post: (url, data, options = {}) => request({\n      url,\n      method: 'post',\n      data,\n      ...options\n    }),\n    put: (url, data, options = {}) => request({\n      url,\n      method: 'put',\n      data,\n      ...options\n    }),\n    patch: (url, data, options = {}) => request({\n      url,\n      method: 'patch',\n      data,\n      ...options\n    }),\n    delete: (url, options = {}) => request({\n      url,\n      method: 'delete',\n      ...options\n    })\n  };\n};\n_s(useApi, \"4aNKY5JgUqKdsJm9tgmf1anW0I8=\", false, function () {\n  return [useLoading, useAuth];\n});\nexport default apiClient;","map":{"version":3,"names":["axios","useLoading","useAuth","config","getApiUrl","apiClient","create","baseURL","apiBaseUrl","headers","timeout","authTimeout","useApi","_s","startLoading","stopLoading","token","logout","refreshToken","interceptors","request","use","Authorization","error","Promise","reject","response","originalRequest","status","_retry","success","refreshError","console","debug","_request$method","log","method","toUpperCase","url","_error$response","_error$config","data","params","loadingMessage","showLoading","apiUrl","startsWith","_error$response2","_error$response2$data","errorMessage","message","Error","get","options","post","put","patch","delete"],"sources":["D:/Movie/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useLoading } from '../context/LoadingContext';\r\nimport { useAuth } from '../context/AuthContext';\r\nimport config, { getApiUrl } from '../utils/config';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: config.apiBaseUrl,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  timeout: config.authTimeout / 3 // Default timeout is 1/3 of auth timeout\r\n});\r\n\r\n/**\r\n * Custom hook that returns API methods with automatic loading state management\r\n * and error handling\r\n */\r\nexport const useApi = () => {\r\n  const { startLoading, stopLoading } = useLoading();\r\n  const { token, logout, refreshToken } = useAuth();\r\n\r\n  // Configure request interceptor\r\n  apiClient.interceptors.request.use(\r\n    (config) => {\r\n      // Add auth token if available\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // Configure response interceptor\r\n  apiClient.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n      const originalRequest = error.config;\r\n      \r\n      // Handle token expiration (401)\r\n      if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n        originalRequest._retry = true;\r\n        \r\n        try {\r\n          // Try to refresh the token\r\n          const success = await refreshToken();\r\n          if (success) {\r\n            // Set new token in the request\r\n            originalRequest.headers.Authorization = `Bearer ${token}`;\r\n            // Retry the original request\r\n            return apiClient(originalRequest);\r\n          } else {\r\n            // If refresh failed, logout\r\n            logout();\r\n          }\r\n        } catch (refreshError) {\r\n          console.error('Token refresh failed:', refreshError);\r\n          logout();\r\n        }\r\n      }\r\n      \r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // Log requests in debug mode\r\n  if (config.debug) {\r\n    apiClient.interceptors.request.use(request => {\r\n      console.log('🚀 API Request:', request.method?.toUpperCase(), request.url, request);\r\n      return request;\r\n    });\r\n    \r\n    apiClient.interceptors.response.use(response => {\r\n      console.log('✅ API Response:', response.status, response.config.url, response);\r\n      return response;\r\n    }, error => {\r\n      console.error('❌ API Error:', \r\n        error.response?.status || 'Network Error', \r\n        error.config?.url, \r\n        error.response || error\r\n      );\r\n      return Promise.reject(error);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Make an API request with automatic loading state\r\n   * @param {Object} options - Request options\r\n   * @param {string} options.url - The endpoint URL\r\n   * @param {string} options.method - HTTP method (get, post, put, delete)\r\n   * @param {Object} options.data - Request payload \r\n   * @param {string} options.loadingMessage - Custom loading message\r\n   * @param {boolean} options.showLoading - Whether to show loading indicator\r\n   * @returns {Promise} - Result of the API call\r\n   */\r\n  const request = async ({\r\n    url,\r\n    method = 'get',\r\n    data = null,\r\n    params = null,\r\n    loadingMessage = 'Loading...',\r\n    showLoading = true\r\n  }) => {\r\n    try {\r\n      if (showLoading) {\r\n        startLoading(loadingMessage);\r\n      }\r\n\r\n      // Convert relative URLs to full API URLs\r\n      const apiUrl = url.startsWith('http') ? url : getApiUrl(url);\r\n\r\n      const response = await apiClient({\r\n        url: apiUrl,\r\n        method,\r\n        data,\r\n        params\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      \r\n      const errorMessage = \r\n        error.response?.data?.message || \r\n        error.message || \r\n        'An unexpected error occurred';\r\n        \r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      if (showLoading) {\r\n        stopLoading();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Convenience methods\r\n  return {\r\n    get: (url, options = {}) => request({ url, method: 'get', ...options }),\r\n    post: (url, data, options = {}) => request({ url, method: 'post', data, ...options }),\r\n    put: (url, data, options = {}) => request({ url, method: 'put', data, ...options }),\r\n    patch: (url, data, options = {}) => request({ url, method: 'patch', data, ...options }),\r\n    delete: (url, options = {}) => request({ url, method: 'delete', ...options })\r\n  };\r\n};\r\n\r\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}