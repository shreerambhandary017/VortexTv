{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Debug function to help troubleshoot token issues\nconst debugToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.warn('No token found in localStorage');\n    return {\n      hasToken: false\n    };\n  }\n  try {\n    // Try to extract data from the token (without verification)\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error('Token is not in valid JWT format (header.payload.signature)');\n      return {\n        hasToken: true,\n        isValidFormat: false,\n        token: token.substring(0, 15) + '...'\n      };\n    }\n\n    // Decode the payload (middle part)\n    const payload = JSON.parse(atob(tokenParts[1]));\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    const isExpired = payload.exp < nowSeconds;\n    return {\n      hasToken: true,\n      isValidFormat: true,\n      token: token.substring(0, 15) + '...',\n      subject: payload.sub,\n      role: payload.role,\n      expiry,\n      isExpired,\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\n    };\n  } catch (error) {\n    console.error('Error analyzing token:', error);\n    return {\n      hasToken: true,\n      isValidFormat: false,\n      error: error.message\n    };\n  }\n};\n\n// Ensure the token is correctly set up for all requests\nconst setupTokenRefresh = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Update both instances of axios - ensure correct format\n    const authHeader = `Bearer ${token}`;\n    api.defaults.headers.common['Authorization'] = authHeader;\n    // Also set the global axios defaults to ensure any direct axios calls have the token\n    axios.defaults.headers.common['Authorization'] = authHeader;\n\n    // Debug info\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\n    console.log('Authorization header format:', authHeader.substring(0, 15) + '...');\n\n    // Return token info for debugging\n    const tokenInfo = debugToken();\n    console.log('Token status:', tokenInfo);\n    return tokenInfo;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('API headers cleared - no token');\n    return {\n      hasToken: false\n    };\n  }\n};\n\n// Function to store token in a consistent way\nconst storeAuthToken = token => {\n  if (!token) {\n    console.warn('Attempted to store empty token');\n    return false;\n  }\n  try {\n    // Store in localStorage\n    localStorage.setItem('token', token);\n\n    // Update axios headers - ensure correct format with Bearer prefix and space\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n    // Verify the token has been set correctly\n    console.log('Token stored and headers set');\n    console.log('Current Authorization header:', api.defaults.headers.common['Authorization']);\n    return true;\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Function to clear auth token completely\nconst clearAuthToken = () => {\n  try {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('Auth token cleared completely');\n    return true;\n  } catch (error) {\n    console.error('Error clearing token:', error);\n    return false;\n  }\n};\n\n// Function to refresh token\nconst refreshToken = async () => {\n  try {\n    // Get current token\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('No token to refresh');\n      return null;\n    }\n\n    // Basic validation of token format\n    if (token.split('.').length !== 3) {\n      console.log('Invalid token format');\n      return null;\n    }\n    try {\n      // Simple client-side check first (doesn't validate signature)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      const payload = JSON.parse(jsonPayload);\n      const currentTime = Math.floor(Date.now() / 1000);\n\n      // If token is severely expired, don't even try to validate\n      if (payload.exp && currentTime > payload.exp + 3600) {\n        // If expired more than an hour ago\n        console.log('Token expired long ago, not attempting validation');\n        return null;\n      }\n    } catch (decodeError) {\n      console.error('Error decoding token:', decodeError);\n    }\n\n    // Use our new validation endpoint to check if token is valid\n    try {\n      console.log('Validating token with server...');\n      const response = await api.get('/auth/validate-token', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        },\n        timeout: 5000\n      });\n      if (response.data && response.data.valid) {\n        console.log('Token validated successfully by server');\n        return token; // Token is still valid\n      } else {\n        console.log('Token invalid according to server');\n        return null;\n      }\n    } catch (validateError) {\n      console.error('Token validation failed:', validateError);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error in refreshToken:', error);\n    return null;\n  }\n};\n\n// Call this once at import time\nsetupTokenRefresh();\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(config => {\n  // Always get fresh token for each request\n  const token = localStorage.getItem('token');\n  if (token) {\n    // For critical endpoints, add extra logging\n    const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\n    const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\n    if (isImportantRequest) {\n      console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\n    }\n\n    // Set token in the header - ensure correct format with Bearer prefix and a space\n    config.headers.Authorization = `Bearer ${token}`;\n\n    // Add timestamp to URLs to prevent caching issues\n    const timestamp = new Date().getTime();\n    if (config.params) {\n      config.params._t = timestamp;\n    } else {\n      config.params = {\n        _t: timestamp\n      };\n    }\n\n    // Add cache control headers to prevent caching of responses\n    config.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';\n    config.headers['Pragma'] = 'no-cache';\n    config.headers['Expires'] = '0';\n  } else {\n    // For debugging, log auth-related requests that have no token\n    if (config.url.includes('/users/') || config.url.includes('/admin/')) {\n      console.log(`Request to ${config.url} with no token`);\n    }\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle authentication errors\napi.interceptors.response.use(response => {\n  // If we get a successful response from an authenticated endpoint,\n  // update the last successful auth timestamp\n  const isAuthEndpoint = ['/users/me', '/admin/', '/subscriptions/'].some(endpoint => response.config.url.includes(endpoint));\n  if (isAuthEndpoint && response.status === 200) {\n    sessionStorage.setItem('lastSuccessfulAuth', Date.now().toString());\n  }\n  return response;\n}, error => {\n  // Don't handle errors for validation endpoint (avoid logout loops)\n  if (error.config && error.config.url && error.config.url.includes('/auth/validate-token')) {\n    console.warn('Token validation error - ignoring to prevent logout loop');\n    return Promise.reject(error);\n  }\n\n  // Handle 401/403 errors for regular endpoints\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    // Enhanced error logging\n    console.warn(`${error.response.status} Authentication error received`, {\n      url: error.config.url,\n      method: error.config.method,\n      responseData: error.response.data\n    });\n\n    // Check if this was already an authentication attempt\n    const isAuthAttempt = error.config.url.includes('/auth/login');\n\n    // For failed login attempts, don't clear existing tokens\n    if (!isAuthAttempt) {\n      // Check if we should actually logout\n      const lastAuthTime = parseInt(sessionStorage.getItem('lastSuccessfulAuth') || '0');\n      const timeSinceLastAuth = Date.now() - lastAuthTime;\n      const shouldLogout = timeSinceLastAuth > 5000; // Only logout if last success was >5s ago\n\n      if (shouldLogout) {\n        console.log('Authentication expired - logging out');\n        localStorage.removeItem('token');\n        sessionStorage.removeItem('isAuthenticated');\n        delete api.defaults.headers.common['Authorization'];\n        delete axios.defaults.headers.common['Authorization'];\n\n        // Store redirect info\n        try {\n          var _error$response, _error$response$data;\n          sessionStorage.setItem('auth_redirect', window.location.pathname);\n          sessionStorage.setItem('auth_error', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Your session has expired. Please login again.');\n        } catch (e) {\n          console.error('Error storing redirect info:', e);\n        }\n\n        // Only redirect to login if we're not already there\n        if (!window.location.pathname.includes('/login')) {\n          // Use a timeout to ensure the current request completes first\n          setTimeout(() => {\n            window.location.href = '/login';\n          }, 100);\n        }\n      } else {\n        console.log('Ignoring auth error - recent successful authentication');\n      }\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nconst login = credentials => {\n  // Clear any existing token before login attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/login', credentials);\n};\nconst register = userData => {\n  // Clear any existing token before register attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/register', userData);\n};\nconst getCurrentUser = () => {\n  // Setup API call with authentication header\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token available for getCurrentUser request');\n    return Promise.reject(new Error('No authentication token available'));\n  }\n\n  // Refresh token setup to ensure headers are properly set\n  setupTokenRefresh();\n\n  // Make the actual getCurrentUser request with explicit Authorization header\n  // Add explicit debugging for this critical request\n  console.log('Making getCurrentUser request with explicit token check');\n  return api.get('/users/me', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n      // Temporarily removed cache headers to fix CORS issues\n      // 'Cache-Control': 'no-cache',\n      // 'Pragma': 'no-cache'\n    },\n    timeout: 5000 // 5 second timeout\n  });\n};\nconst getAllUsers = () => {\n  return api.get('/users');\n};\nconst getUserById = userId => {\n  return api.get(`/users/${userId}`);\n};\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\nconst deleteUser = userId => {\n  return api.delete(`/users/${userId}`);\n};\nconst createUser = userData => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\nconst createSubscription = planId => {\n  return api.post('/subscriptions', {\n    plan_id: planId\n  });\n};\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = async () => {\n  console.log('API: generateAccessCode called');\n  try {\n    // Make sure token is refreshed before making the request\n    setupTokenRefresh();\n\n    // Log the authorization header to ensure it's set\n    const authHeader = api.defaults.headers.common['Authorization'];\n    console.log('API: Authorization header present:', !!authHeader);\n\n    // Add timeout and retry logic\n    const response = await api.post('/access/generate', {}, {\n      timeout: 10000,\n      // 10 second timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    console.log('API: Access code generation response:', response.data);\n    return response;\n  } catch (error) {\n    var _error$response2;\n    console.error('API: Error generating access code:', error);\n    console.error('API: Error response:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n\n    // Throw the error with extra information\n    throw error;\n  }\n};\nconst getAccessCodes = () => {\n  return api.get('/access/me');\n};\nconst redeemAccessCode = accessCode => {\n  return api.post('/access/redeem', {\n    code: accessCode\n  });\n};\nconst revokeAccessCode = codeId => {\n  return api.post(`/access/revoke/${codeId}`);\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  // Ensure token is properly set before making admin requests\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token available for admin request');\n    return Promise.reject(new Error('No authentication token available'));\n  }\n\n  // Explicitly ensure we have the user data with admin privileges\n  const userData = JSON.parse(localStorage.getItem('user') || '{}');\n  const userRole = userData.role;\n  if (userRole !== 'admin' && userRole !== 'superadmin') {\n    console.error(`User role ${userRole || 'unknown'} does not have admin access`);\n    return Promise.reject(new Error('Insufficient privileges. Admin access required.'));\n  }\n  console.log(`Making admin request with verified role: ${userRole}`);\n\n  // Ensure token is properly set in API headers before making the request\n  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n  // Make a pre-flight validation request to ensure token is valid\n  console.log('Validating admin token before request...');\n  return api.get('/auth/validate-token').then(validationResponse => {\n    if (validationResponse.data && validationResponse.data.valid) {\n      console.log('Token validated successfully, proceeding with admin stats request');\n\n      // Make the actual admin stats request with explicit Authorization header\n      return api.get('/admin/stats', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Cache-Control': 'no-cache',\n          'Pragma': 'no-cache'\n        },\n        timeout: 15000 // 15 second timeout for admin requests\n      });\n    } else {\n      console.error('Token validation failed');\n      return Promise.reject(new Error('Token validation failed. Please log in again.'));\n    }\n  }).catch(error => {\n    console.error('Error during admin validation:', error);\n    if (error.response && error.response.status === 401) {\n      // Clear invalid token\n      localStorage.removeItem('token');\n      api.defaults.headers.common['Authorization'] = undefined;\n    }\n    return Promise.reject(error);\n  });\n};\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, {\n    role\n  });\n};\n\n// Update user information (for admin panel)\nconst adminUpdateUser = (userId, userData) => {\n  console.log(`Updating user ${userId} with data:`, userData);\n  return api.put(`/admin/users/${userId}`, userData);\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', {\n    contentId,\n    contentType\n  });\n};\nconst removeFromFavorites = contentId => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', {\n    contentId,\n    watchDuration,\n    watchPercentage\n  });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\nconst createProfile = profileData => {\n  return api.post('/profiles', profileData);\n};\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\nconst deleteProfile = profileId => {\n  return api.delete(`/profiles/${profileId}`);\n};\n\n// Password management\nconst updatePassword = (currentPassword, newPassword) => {\n  return api.post('/auth/update-password', {\n    current_password: currentPassword,\n    new_password: newPassword\n  });\n};\n\n// Admin reset user password (superadmin only)\nconst adminResetUserPassword = (userId, newPassword) => {\n  return api.put(`/admin/users/${userId}/password`, {\n    new_password: newPassword\n  });\n};\n\n// Password reset functions\nconst requestPasswordReset = async email => {\n  try {\n    const response = await api.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting password reset:', error);\n    throw error;\n  }\n};\nconst resetPassword = async (token, newPassword) => {\n  try {\n    const response = await api.post('/auth/reset-password', {\n      token,\n      new_password: newPassword\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error resetting password:', error);\n    throw error;\n  }\n};\n\n// Export API functions\nexport { api, login, register, getCurrentUser, getAllUsers, getUserById, updateUser, deleteUser, createUser, getAllSubscriptionPlans, getUserSubscription, createSubscription, cancelSubscription, checkSubscription, generateAccessCode, getAccessCodes, redeemAccessCode, revokeAccessCode, getDashboardStats, getAllSubscriptions, getUsersWithRoles, updateUserRole, adminUpdateUser, getFavorites, addToFavorites, removeFromFavorites, getWatchHistory, addToWatchHistory, getUserProfiles, createProfile, updateProfile, deleteProfile, updatePassword, adminResetUserPassword, requestPasswordReset, resetPassword, storeAuthToken, clearAuthToken, setupTokenRefresh, debugToken };\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","debugToken","token","localStorage","getItem","console","warn","hasToken","tokenParts","split","length","error","isValidFormat","substring","payload","JSON","parse","atob","expiry","Date","exp","toLocaleString","nowSeconds","Math","floor","now","isExpired","subject","sub","role","expiresIn","message","setupTokenRefresh","authHeader","defaults","headers","common","log","tokenInfo","storeAuthToken","setItem","clearAuthToken","removeItem","refreshToken","base64Url","base64","replace","jsonPayload","decodeURIComponent","map","c","charCodeAt","toString","slice","join","currentTime","decodeError","response","get","Authorization","timeout","data","valid","validateError","interceptors","request","use","config","criticalEndpoints","isImportantRequest","some","endpoint","url","includes","timestamp","getTime","params","_t","Promise","reject","isAuthEndpoint","status","sessionStorage","method","responseData","isAuthAttempt","lastAuthTime","parseInt","timeSinceLastAuth","shouldLogout","_error$response","_error$response$data","window","location","pathname","e","setTimeout","href","login","credentials","post","register","userData","getCurrentUser","Error","getAllUsers","getUserById","userId","updateUser","put","deleteUser","delete","createUser","getAllSubscriptionPlans","getUserSubscription","createSubscription","planId","plan_id","cancelSubscription","checkSubscription","generateAccessCode","_error$response2","getAccessCodes","redeemAccessCode","accessCode","code","revokeAccessCode","codeId","getDashboardStats","userRole","then","validationResponse","catch","undefined","getAllSubscriptions","getUsersWithRoles","updateUserRole","adminUpdateUser","getFavorites","addToFavorites","contentId","contentType","removeFromFavorites","getWatchHistory","addToWatchHistory","watchDuration","watchPercentage","getUserProfiles","createProfile","profileData","updateProfile","profileId","deleteProfile","updatePassword","currentPassword","newPassword","current_password","new_password","adminResetUserPassword","requestPasswordReset","email","resetPassword"],"sources":["D:/Movie/frontend/src/api/backendApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Debug function to help troubleshoot token issues\nconst debugToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.warn('No token found in localStorage');\n    return { hasToken: false };\n  }\n\n  try {\n    // Try to extract data from the token (without verification)\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error('Token is not in valid JWT format (header.payload.signature)');\n      return { hasToken: true, isValidFormat: false, token: token.substring(0, 15) + '...' };\n    }\n\n    // Decode the payload (middle part)\n    const payload = JSON.parse(atob(tokenParts[1]));\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    const isExpired = payload.exp < nowSeconds;\n\n    return {\n      hasToken: true,\n      isValidFormat: true,\n      token: token.substring(0, 15) + '...',\n      subject: payload.sub,\n      role: payload.role,\n      expiry,\n      isExpired,\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\n    };\n  } catch (error) {\n    console.error('Error analyzing token:', error);\n    return { hasToken: true, isValidFormat: false, error: error.message };\n  }\n};\n\n// Ensure the token is correctly set up for all requests\nconst setupTokenRefresh = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Update both instances of axios - ensure correct format\n    const authHeader = `Bearer ${token}`;\n    api.defaults.headers.common['Authorization'] = authHeader;\n    // Also set the global axios defaults to ensure any direct axios calls have the token\n    axios.defaults.headers.common['Authorization'] = authHeader;\n    \n    // Debug info\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\n    console.log('Authorization header format:', authHeader.substring(0, 15) + '...');\n    \n    // Return token info for debugging\n    const tokenInfo = debugToken();\n    console.log('Token status:', tokenInfo);\n    return tokenInfo;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('API headers cleared - no token');\n    return { hasToken: false };\n  }\n};\n\n// Function to store token in a consistent way\nconst storeAuthToken = (token) => {\n  if (!token) {\n    console.warn('Attempted to store empty token');\n    return false;\n  }\n  \n  try {\n    // Store in localStorage\n    localStorage.setItem('token', token);\n    \n    // Update axios headers - ensure correct format with Bearer prefix and space\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    \n    // Verify the token has been set correctly\n    console.log('Token stored and headers set');\n    console.log('Current Authorization header:', api.defaults.headers.common['Authorization']);\n    \n    return true;\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Function to clear auth token completely\nconst clearAuthToken = () => {\n  try {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('Auth token cleared completely');\n    return true;\n  } catch (error) {\n    console.error('Error clearing token:', error);\n    return false;\n  }\n};\n\n// Function to refresh token\nconst refreshToken = async () => {\n  try {\n    // Get current token\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log('No token to refresh');\n      return null;\n    }\n    \n    // Basic validation of token format\n    if (token.split('.').length !== 3) {\n      console.log('Invalid token format');\n      return null;\n    }\n    \n    try {\n      // Simple client-side check first (doesn't validate signature)\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      \n      const payload = JSON.parse(jsonPayload);\n      const currentTime = Math.floor(Date.now() / 1000);\n      \n      // If token is severely expired, don't even try to validate\n      if (payload.exp && currentTime > payload.exp + 3600) { // If expired more than an hour ago\n        console.log('Token expired long ago, not attempting validation');\n        return null;\n      }\n    } catch (decodeError) {\n      console.error('Error decoding token:', decodeError);\n    }\n    \n    // Use our new validation endpoint to check if token is valid\n    try {\n      console.log('Validating token with server...');\n      const response = await api.get('/auth/validate-token', {\n        headers: { Authorization: `Bearer ${token}` },\n        timeout: 5000\n      });\n      \n      if (response.data && response.data.valid) {\n        console.log('Token validated successfully by server');\n        return token; // Token is still valid\n      } else {\n        console.log('Token invalid according to server');\n        return null;\n      }\n    } catch (validateError) {\n      console.error('Token validation failed:', validateError);\n      return null;\n    }\n  } catch (error) {\n    console.error('Error in refreshToken:', error);\n    return null;\n  }\n};\n\n// Call this once at import time\nsetupTokenRefresh();\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(\n  (config) => {\n    // Always get fresh token for each request\n    const token = localStorage.getItem('token');\n    if (token) {\n      // For critical endpoints, add extra logging\n      const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\n      const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\n      \n      if (isImportantRequest) {\n        console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\n      }\n      \n      // Set token in the header - ensure correct format with Bearer prefix and a space\n      config.headers.Authorization = `Bearer ${token}`;\n      \n      // Add timestamp to URLs to prevent caching issues\n      const timestamp = new Date().getTime();\n      if (config.params) {\n        config.params._t = timestamp;\n      } else {\n        config.params = { _t: timestamp };\n      }\n      \n      // Add cache control headers to prevent caching of responses\n      config.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';\n      config.headers['Pragma'] = 'no-cache';\n      config.headers['Expires'] = '0';\n    } else {\n      // For debugging, log auth-related requests that have no token\n      if (config.url.includes('/users/') || config.url.includes('/admin/')) {\n        console.log(`Request to ${config.url} with no token`);\n      }\n    }\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle authentication errors\napi.interceptors.response.use(\n  (response) => {\n    // If we get a successful response from an authenticated endpoint,\n    // update the last successful auth timestamp\n    const isAuthEndpoint = ['/users/me', '/admin/', '/subscriptions/'].some(endpoint => \n      response.config.url.includes(endpoint)\n    );\n    \n    if (isAuthEndpoint && response.status === 200) {\n      sessionStorage.setItem('lastSuccessfulAuth', Date.now().toString());\n    }\n    \n    return response;\n  },\n  (error) => {\n    // Don't handle errors for validation endpoint (avoid logout loops)\n    if (error.config && error.config.url && error.config.url.includes('/auth/validate-token')) {\n      console.warn('Token validation error - ignoring to prevent logout loop');\n      return Promise.reject(error);\n    }\n    \n    // Handle 401/403 errors for regular endpoints\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      // Enhanced error logging\n      console.warn(`${error.response.status} Authentication error received`, {\n        url: error.config.url,\n        method: error.config.method,\n        responseData: error.response.data\n      });\n      \n      // Check if this was already an authentication attempt\n      const isAuthAttempt = error.config.url.includes('/auth/login');\n      \n      // For failed login attempts, don't clear existing tokens\n      if (!isAuthAttempt) {\n        // Check if we should actually logout\n        const lastAuthTime = parseInt(sessionStorage.getItem('lastSuccessfulAuth') || '0');\n        const timeSinceLastAuth = Date.now() - lastAuthTime;\n        const shouldLogout = timeSinceLastAuth > 5000; // Only logout if last success was >5s ago\n        \n        if (shouldLogout) {\n          console.log('Authentication expired - logging out');\n          localStorage.removeItem('token');\n          sessionStorage.removeItem('isAuthenticated');\n          delete api.defaults.headers.common['Authorization'];\n          delete axios.defaults.headers.common['Authorization'];\n          \n          // Store redirect info\n          try {\n            sessionStorage.setItem('auth_redirect', window.location.pathname);\n            sessionStorage.setItem('auth_error', error.response?.data?.message || 'Your session has expired. Please login again.');\n          } catch (e) {\n            console.error('Error storing redirect info:', e);\n          }\n          \n          // Only redirect to login if we're not already there\n          if (!window.location.pathname.includes('/login')) {\n            // Use a timeout to ensure the current request completes first\n            setTimeout(() => {\n              window.location.href = '/login';\n            }, 100);\n          }\n        } else {\n          console.log('Ignoring auth error - recent successful authentication');\n        }\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication\nconst login = (credentials) => {\n  // Clear any existing token before login attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/login', credentials);\n};\n\nconst register = (userData) => {\n  // Clear any existing token before register attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/register', userData);\n};\n\nconst getCurrentUser = () => {\n  // Setup API call with authentication header\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token available for getCurrentUser request');\n    return Promise.reject(new Error('No authentication token available'));\n  }\n  \n  // Refresh token setup to ensure headers are properly set\n  setupTokenRefresh();\n  \n  // Make the actual getCurrentUser request with explicit Authorization header\n  // Add explicit debugging for this critical request\n  console.log('Making getCurrentUser request with explicit token check');\n  return api.get('/users/me', {\n    headers: {\n      'Authorization': `Bearer ${token}`\n      // Temporarily removed cache headers to fix CORS issues\n      // 'Cache-Control': 'no-cache',\n      // 'Pragma': 'no-cache'\n    },\n    timeout: 5000 // 5 second timeout\n  });\n};\n\nconst getAllUsers = () => {\n  return api.get('/users');\n};\n\nconst getUserById = (userId) => {\n  return api.get(`/users/${userId}`);\n};\n\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\n\nconst deleteUser = (userId) => {\n  return api.delete(`/users/${userId}`);\n};\n\nconst createUser = (userData) => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\n\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\n\nconst createSubscription = (planId) => {\n  return api.post('/subscriptions', { plan_id: planId });\n};\n\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\n\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = async () => {\n  console.log('API: generateAccessCode called');\n  \n  try {\n    // Make sure token is refreshed before making the request\n    setupTokenRefresh();\n    \n    // Log the authorization header to ensure it's set\n    const authHeader = api.defaults.headers.common['Authorization'];\n    console.log('API: Authorization header present:', !!authHeader);\n    \n    // Add timeout and retry logic\n    const response = await api.post('/access/generate', {}, {\n      timeout: 10000, // 10 second timeout\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache'\n      }\n    });\n    \n    console.log('API: Access code generation response:', response.data);\n    return response;\n  } catch (error) {\n    console.error('API: Error generating access code:', error);\n    console.error('API: Error response:', error.response?.data);\n    \n    // Throw the error with extra information\n    throw error;\n  }\n};\n\nconst getAccessCodes = () => {\n  return api.get('/access/me');\n};\n\nconst redeemAccessCode = (accessCode) => {\n  return api.post('/access/redeem', { code: accessCode });\n};\n\nconst revokeAccessCode = (codeId) => {\n  return api.post(`/access/revoke/${codeId}`);\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  // Ensure token is properly set before making admin requests\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.error('No token available for admin request');\n    return Promise.reject(new Error('No authentication token available'));\n  }\n  \n  // Explicitly ensure we have the user data with admin privileges\n  const userData = JSON.parse(localStorage.getItem('user') || '{}');\n  const userRole = userData.role;\n  \n  if (userRole !== 'admin' && userRole !== 'superadmin') {\n    console.error(`User role ${userRole || 'unknown'} does not have admin access`);\n    return Promise.reject(new Error('Insufficient privileges. Admin access required.'));\n  }\n  \n  console.log(`Making admin request with verified role: ${userRole}`);\n  \n  // Ensure token is properly set in API headers before making the request\n  api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  \n  // Make a pre-flight validation request to ensure token is valid\n  console.log('Validating admin token before request...');\n  return api.get('/auth/validate-token')\n    .then(validationResponse => {\n      if (validationResponse.data && validationResponse.data.valid) {\n        console.log('Token validated successfully, proceeding with admin stats request');\n        \n        // Make the actual admin stats request with explicit Authorization header\n        return api.get('/admin/stats', {\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Cache-Control': 'no-cache',\n            'Pragma': 'no-cache'\n          },\n          timeout: 15000 // 15 second timeout for admin requests\n        });\n      } else {\n        console.error('Token validation failed');\n        return Promise.reject(new Error('Token validation failed. Please log in again.'));\n      }\n    })\n    .catch(error => {\n      console.error('Error during admin validation:', error);\n      if (error.response && error.response.status === 401) {\n        // Clear invalid token\n        localStorage.removeItem('token');\n        api.defaults.headers.common['Authorization'] = undefined;\n      }\n      return Promise.reject(error);\n    });\n};\n\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\n\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\n\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, { role });\n};\n\n// Update user information (for admin panel)\nconst adminUpdateUser = (userId, userData) => {\n  console.log(`Updating user ${userId} with data:`, userData);\n  return api.put(`/admin/users/${userId}`, userData);\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\n\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', { contentId, contentType });\n};\n\nconst removeFromFavorites = (contentId) => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\n\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', { contentId, watchDuration, watchPercentage });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\n\nconst createProfile = (profileData) => {\n  return api.post('/profiles', profileData);\n};\n\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\n\nconst deleteProfile = (profileId) => {\n  return api.delete(`/profiles/${profileId}`);\n};\n\n// Password management\nconst updatePassword = (currentPassword, newPassword) => {\n  return api.post('/auth/update-password', { current_password: currentPassword, new_password: newPassword });\n};\n\n// Admin reset user password (superadmin only)\nconst adminResetUserPassword = (userId, newPassword) => {\n  return api.put(`/admin/users/${userId}/password`, { new_password: newPassword });\n};\n\n// Password reset functions\nconst requestPasswordReset = async (email) => {\n  try {\n    const response = await api.post('/auth/forgot-password', { email });\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting password reset:', error);\n    throw error;\n  }\n};\n\nconst resetPassword = async (token, newPassword) => {\n  try {\n    const response = await api.post('/auth/reset-password', { \n      token, \n      new_password: newPassword \n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error resetting password:', error);\n    throw error;\n  }\n};\n\n// Export API functions\nexport {\n  api,\n  login,\n  register,\n  getCurrentUser,\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser,\n  createUser,\n  getAllSubscriptionPlans,\n  getUserSubscription,\n  createSubscription,\n  cancelSubscription,\n  checkSubscription,\n  generateAccessCode,\n  getAccessCodes,\n  redeemAccessCode,\n  revokeAccessCode,\n  getDashboardStats,\n  getAllSubscriptions,\n  getUsersWithRoles,\n  updateUserRole,\n  adminUpdateUser,\n  getFavorites,\n  addToFavorites,\n  removeFromFavorites,\n  getWatchHistory,\n  addToWatchHistory,\n  getUserProfiles,\n  createProfile,\n  updateProfile,\n  deleteProfile,\n  updatePassword,\n  adminResetUserPassword,\n  requestPasswordReset,\n  resetPassword,\n  storeAuthToken,\n  clearAuthToken,\n  setupTokenRefresh,\n  debugToken\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}