{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport api, { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi } from '../api/backendApi';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Token is valid - refreshing auth state\");\n\n      // Ensure token is set in headers\n      setupTokenRefresh();\n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async formData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting to register with:', {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n\n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      setUser(userData);\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n\n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n\n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    try {\n      const response = await api.checkSubscription();\n\n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription\n      }));\n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user.hasSubscription) return {\n      success: false\n    };\n    try {\n      const response = await api.generateAccessCode();\n      return {\n        success: true,\n        code: response.data.code\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to generate access code');\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async code => {\n    try {\n      const response = await api.redeemAccessCode(code);\n\n      // Update user data with access code info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasAccessCode: true,\n        accessCode: response.data.accessCode\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to redeem access code');\n      return {\n        success: false,\n        error: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"zLYyaohv+2jt6toekfB94sM7wlM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","axios","jwtDecode","api","setupTokenRefresh","storeAuthToken","clearAuthToken","getCurrentUser","register","registerApi","login","loginApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","navigate","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","token","localStorage","getItem","decoded","currentTime","Date","now","exp","response","data","tokenData","user_id","sub","role","tokenError","formData","username","email","password","substring","userData","_error$response","_error$response$data","message","credentials","status","userResponse","userError","minimalUserData","headers","request","logout","checkSubscription","prevUser","hasSubscription","hasAccessCode","subscription","generateAccessCode","success","code","_error$response2","_error$response2$data","redeemAccessCode","accessCode","_error$response3","_error$response3$data","_error$response4","_error$response4$data","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport api, { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi } from '../api/backendApi';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    \n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      \n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      \n      console.log(\"Token is valid - refreshing auth state\");\n      \n      // Ensure token is set in headers\n      setupTokenRefresh();\n      \n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        \n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        \n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          \n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting to register with:', { \n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      \n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting login with credentials:', { \n        username: credentials.username, \n        password: credentials.password ? '*****' : 'empty' \n      });\n      \n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n      \n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', { status: response.status });\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        \n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n        \n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        \n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    \n    try {\n      const response = await api.checkSubscription();\n      \n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription\n      }));\n      \n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user.hasSubscription) return { success: false };\n    \n    try {\n      const response = await api.generateAccessCode();\n      return { success: true, code: response.data.code };\n    } catch (error) {\n      setError(error.response?.data?.message || 'Failed to generate access code');\n      return { success: false };\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async (code) => {\n    try {\n      const response = await api.redeemAccessCode(code);\n      \n      // Update user data with access code info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasAccessCode: true,\n        accessCode: response.data.accessCode\n      }));\n      \n      return { success: true };\n    } catch (error) {\n      setError(error.response?.data?.message || 'Failed to redeem access code');\n      return { success: false, error: error.response?.data?.message };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}