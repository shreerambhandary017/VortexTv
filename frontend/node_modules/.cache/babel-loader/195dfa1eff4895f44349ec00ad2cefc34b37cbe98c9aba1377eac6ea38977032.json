{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    checkUserLoggedIn();\n  }, []);\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        localStorage.removeItem('token');\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n\n      // Set authorization header in axios instance instead of defaults\n      const response = await axios.get('http://localhost:5000/api/users/me', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      setUser(response.data);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Error checking authentication:', error);\n      localStorage.removeItem('token');\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async userData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('http://localhost:5000/api/auth/register', userData);\n      const token = response.data.token;\n      localStorage.setItem('token', token);\n\n      // Set user data manually instead of calling checkUserLoggedIn\n      // This avoids an extra API call that might fail\n      const userId = response.data.user_id;\n      setUser({\n        user_id: userId,\n        username: userData.username,\n        email: userData.email,\n        role: 'user' // Default role for new registrations\n      });\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n      const response = await axios.post('http://localhost:5000/api/auth/login', credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      localStorage.setItem('token', token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await axios.get('http://localhost:5000/api/users/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axios.defaults.headers.common['Authorization'];\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    try {\n      const response = await axios.get('http://localhost:5000/api/subscriptions/check');\n\n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription\n      }));\n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user.hasSubscription) return {\n      success: false\n    };\n    try {\n      const response = await axios.post('http://localhost:5000/api/access-codes/generate');\n      return {\n        success: true,\n        code: response.data.code\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to generate access code');\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async code => {\n    try {\n      const response = await axios.post('http://localhost:5000/api/access-codes/redeem', {\n        code\n      });\n\n      // Update user data with access code info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasAccessCode: true,\n        accessCode: response.data.accessCode\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to redeem access code');\n      return {\n        success: false,\n        error: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"zLYyaohv+2jt6toekfB94sM7wlM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","axios","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","navigate","checkUserLoggedIn","token","localStorage","getItem","decoded","currentTime","Date","now","exp","removeItem","response","get","headers","data","console","register","userData","post","setItem","userId","user_id","username","email","role","_error$response","_error$response$data","message","login","credentials","log","password","status","substring","userResponse","userError","minimalUserData","request","logout","defaults","common","checkSubscription","prevUser","hasSubscription","hasAccessCode","subscription","generateAccessCode","success","code","_error$response2","_error$response2$data","redeemAccessCode","accessCode","_error$response3","_error$response3$data","_error$response4","_error$response4$data","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\n// Create auth context\r\nexport const AuthContext = createContext();\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Check if user is already logged in on mount\r\n  useEffect(() => {\r\n    checkUserLoggedIn();\r\n  }, []);\r\n\r\n  // Check if token exists and is valid\r\n  const checkUserLoggedIn = async () => {\r\n    setIsLoading(true);\r\n    const token = localStorage.getItem('token');\r\n    \r\n    if (!token) {\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Check if token is expired\r\n      const decoded = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n      \r\n      if (decoded.exp < currentTime) {\r\n        localStorage.removeItem('token');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n        setIsLoading(false);\r\n        return;\r\n      }\r\n      \r\n      // Set authorization header in axios instance instead of defaults\r\n      const response = await axios.get('http://localhost:5000/api/users/me', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      setUser(response.data);\r\n      setIsAuthenticated(true);\r\n    } catch (error) {\r\n      console.error('Error checking authentication:', error);\r\n      localStorage.removeItem('token');\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n    }\r\n    \r\n    setIsLoading(false);\r\n  };\r\n\r\n  // Register user\r\n  const register = async (userData) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/auth/register', userData);\r\n      \r\n      const token = response.data.token;\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Set user data manually instead of calling checkUserLoggedIn\r\n      // This avoids an extra API call that might fail\r\n      const userId = response.data.user_id; \r\n      setUser({\r\n        user_id: userId,\r\n        username: userData.username,\r\n        email: userData.email,\r\n        role: 'user' // Default role for new registrations\r\n      });\r\n      setIsAuthenticated(true);\r\n      \r\n      navigate('/subscriptions');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      setError(error.response?.data?.message || 'Registration failed');\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Login user\r\n  const login = async (credentials) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      console.log('Attempting login with credentials:', { \r\n        username: credentials.username, \r\n        password: credentials.password ? '*****' : 'empty' \r\n      });\r\n      \r\n      const response = await axios.post('http://localhost:5000/api/auth/login', credentials);\r\n      console.log('Login response received:', { status: response.status });\r\n      \r\n      const token = response.data.token;\r\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\r\n      \r\n      if (!token) {\r\n        console.error('No token received in login response');\r\n        setError('Authentication failed: No token received');\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n      \r\n      localStorage.setItem('token', token);\r\n      \r\n      try {\r\n        // Get current user data after login with proper authorization header\r\n        console.log('Fetching user data after login');\r\n        const userResponse = await axios.get('http://localhost:5000/api/users/me', {\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n        \r\n        console.log('User data received:', userResponse.data);\r\n        const userData = userResponse.data;\r\n        setUser(userData);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Redirect based on user role\r\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\r\n          navigate('/admin');\r\n        } else {\r\n          navigate('/browse');\r\n        }\r\n        \r\n        return true;\r\n      } catch (userError) {\r\n        console.error('Error fetching user data after login:', userError);\r\n        \r\n        // Even if user fetch fails, we're still logged in with a token\r\n        // Set minimal user data based on the login response\r\n        const minimalUserData = {\r\n          user_id: response.data.user_id,\r\n          username: response.data.username,\r\n          email: response.data.email,\r\n          role: response.data.role\r\n        };\r\n        \r\n        console.log('Setting minimal user data:', minimalUserData);\r\n        setUser(minimalUserData);\r\n        setIsAuthenticated(true);\r\n        \r\n        // Redirect based on role from login response\r\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\r\n          navigate('/admin');\r\n        } else {\r\n          navigate('/browse');\r\n        }\r\n        \r\n        return true;\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      \r\n      // Enhanced error logging\r\n      if (error.response) {\r\n        console.error('Error response data:', error.response.data);\r\n        console.error('Error response status:', error.response.status);\r\n        console.error('Error response headers:', error.response.headers);\r\n        setError(error.response.data.message || 'Login failed');\r\n      } else if (error.request) {\r\n        console.error('Error request:', error.request);\r\n        setError('No response received from server. Please try again later.');\r\n      } else {\r\n        console.error('Error message:', error.message);\r\n        setError(error.message || 'Login failed');\r\n      }\r\n      \r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n    navigate('/login');\r\n  };\r\n\r\n  // Check if user has active subscription\r\n  const checkSubscription = async () => {\r\n    if (!isAuthenticated) return false;\r\n    \r\n    try {\r\n      const response = await axios.get('http://localhost:5000/api/subscriptions/check');\r\n      \r\n      // Update user data with subscription info\r\n      setUser(prevUser => ({\r\n        ...prevUser,\r\n        hasSubscription: response.data.hasSubscription,\r\n        hasAccessCode: response.data.hasAccessCode,\r\n        subscription: response.data.subscription\r\n      }));\r\n      \r\n      return response.data.hasSubscription || response.data.hasAccessCode;\r\n    } catch (error) {\r\n      console.error('Error checking subscription:', error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Generate access code\r\n  const generateAccessCode = async () => {\r\n    if (!isAuthenticated || !user.hasSubscription) return { success: false };\r\n    \r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/access-codes/generate');\r\n      return { success: true, code: response.data.code };\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Failed to generate access code');\r\n      return { success: false };\r\n    }\r\n  };\r\n\r\n  // Redeem access code\r\n  const redeemAccessCode = async (code) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/api/access-codes/redeem', { code });\r\n      \r\n      // Update user data with access code info\r\n      setUser(prevUser => ({\r\n        ...prevUser,\r\n        hasAccessCode: true,\r\n        accessCode: response.data.accessCode\r\n      }));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      setError(error.response?.data?.message || 'Failed to redeem access code');\r\n      return { success: false, error: error.response?.data?.message };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isLoading,\r\n        error,\r\n        register,\r\n        login,\r\n        logout,\r\n        checkSubscription,\r\n        generateAccessCode,\r\n        redeemAccessCode\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}