{"ast":null,"code":"const environments = {\n  development: {\n    apiBaseUrl: 'http://localhost:5000/api',\n    authTimeout: 30 * 60 * 1000,\n    // 30 minutes\n    tokenRefreshInterval: 5 * 60 * 1000,\n    // 5 minutes\n    debug: true\n  },\n  staging: {\n    apiBaseUrl: 'https://staging-api.example.com/api',\n    authTimeout: 30 * 60 * 1000,\n    tokenRefreshInterval: 5 * 60 * 1000,\n    debug: true\n  },\n  production: {\n    apiBaseUrl: 'https://api.example.com/api',\n    authTimeout: 60 * 60 * 1000,\n    // 1 hour\n    tokenRefreshInterval: 15 * 60 * 1000,\n    // 15 minutes\n    debug: false\n  }\n};\n\n// Determine current environment\nconst getCurrentEnvironment = () => {\n  // Read from environment variables if available\n  if (process.env.REACT_APP_ENV) {\n    return process.env.REACT_APP_ENV;\n  }\n\n  // Use hostname to detect environment\n  const hostname = window.location.hostname;\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return 'development';\n  } else if (hostname.includes('staging') || hostname.includes('test')) {\n    return 'staging';\n  } else {\n    return 'production';\n  }\n};\n\n// Get current environment config\nconst env = getCurrentEnvironment();\nconst config = environments[env] || environments.development;\n\n// Add environment name to config\nconfig.environment = env;\n\n// Export config object and helper function\nexport default config;\n\n// Helper function to get API endpoint\nexport const getApiUrl = endpoint => {\n  const baseUrl = config.apiBaseUrl;\n  // Ensure endpoint starts with / and baseUrl doesn't end with /\n  const formattedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\n  return `${baseUrl}${formattedEndpoint}`;\n};","map":{"version":3,"names":["environments","development","apiBaseUrl","authTimeout","tokenRefreshInterval","debug","staging","production","getCurrentEnvironment","process","env","REACT_APP_ENV","hostname","window","location","includes","config","environment","getApiUrl","endpoint","baseUrl","formattedEndpoint","startsWith"],"sources":["D:/Movie/frontend/src/utils/config.js"],"sourcesContent":["const environments = {\r\n  development: {\r\n    apiBaseUrl: 'http://localhost:5000/api',\r\n    authTimeout: 30 * 60 * 1000, // 30 minutes\r\n    tokenRefreshInterval: 5 * 60 * 1000, // 5 minutes\r\n    debug: true\r\n  },\r\n  staging: {\r\n    apiBaseUrl: 'https://staging-api.example.com/api',\r\n    authTimeout: 30 * 60 * 1000,\r\n    tokenRefreshInterval: 5 * 60 * 1000,\r\n    debug: true\r\n  },\r\n  production: {\r\n    apiBaseUrl: 'https://api.example.com/api',\r\n    authTimeout: 60 * 60 * 1000, // 1 hour\r\n    tokenRefreshInterval: 15 * 60 * 1000, // 15 minutes\r\n    debug: false\r\n  }\r\n};\r\n\r\n// Determine current environment\r\nconst getCurrentEnvironment = () => {\r\n  // Read from environment variables if available\r\n  if (process.env.REACT_APP_ENV) {\r\n    return process.env.REACT_APP_ENV;\r\n  }\r\n  \r\n  // Use hostname to detect environment\r\n  const hostname = window.location.hostname;\r\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\r\n    return 'development';\r\n  } else if (hostname.includes('staging') || hostname.includes('test')) {\r\n    return 'staging';\r\n  } else {\r\n    return 'production';\r\n  }\r\n};\r\n\r\n// Get current environment config\r\nconst env = getCurrentEnvironment();\r\nconst config = environments[env] || environments.development;\r\n\r\n// Add environment name to config\r\nconfig.environment = env;\r\n\r\n// Export config object and helper function\r\nexport default config;\r\n\r\n// Helper function to get API endpoint\r\nexport const getApiUrl = (endpoint) => {\r\n  const baseUrl = config.apiBaseUrl;\r\n  // Ensure endpoint starts with / and baseUrl doesn't end with /\r\n  const formattedEndpoint = endpoint.startsWith('/') ? endpoint : `/${endpoint}`;\r\n  return `${baseUrl}${formattedEndpoint}`;\r\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACnBC,WAAW,EAAE;IACXC,UAAU,EAAE,2BAA2B;IACvCC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC7BC,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IAAE;IACrCC,KAAK,EAAE;EACT,CAAC;EACDC,OAAO,EAAE;IACPJ,UAAU,EAAE,qCAAqC;IACjDC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAC3BC,oBAAoB,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;IACnCC,KAAK,EAAE;EACT,CAAC;EACDE,UAAU,EAAE;IACVL,UAAU,EAAE,6BAA6B;IACzCC,WAAW,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IAC7BC,oBAAoB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IAAE;IACtCC,KAAK,EAAE;EACT;AACF,CAAC;;AAED;AACA,MAAMG,qBAAqB,GAAGA,CAAA,KAAM;EAClC;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,aAAa,EAAE;IAC7B,OAAOF,OAAO,CAACC,GAAG,CAACC,aAAa;EAClC;;EAEA;EACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ;EACzC,IAAIA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW,EAAE;IACxD,OAAO,aAAa;EACtB,CAAC,MAAM,IAAIA,QAAQ,CAACG,QAAQ,CAAC,SAAS,CAAC,IAAIH,QAAQ,CAACG,QAAQ,CAAC,MAAM,CAAC,EAAE;IACpE,OAAO,SAAS;EAClB,CAAC,MAAM;IACL,OAAO,YAAY;EACrB;AACF,CAAC;;AAED;AACA,MAAML,GAAG,GAAGF,qBAAqB,CAAC,CAAC;AACnC,MAAMQ,MAAM,GAAGhB,YAAY,CAACU,GAAG,CAAC,IAAIV,YAAY,CAACC,WAAW;;AAE5D;AACAe,MAAM,CAACC,WAAW,GAAGP,GAAG;;AAExB;AACA,eAAeM,MAAM;;AAErB;AACA,OAAO,MAAME,SAAS,GAAIC,QAAQ,IAAK;EACrC,MAAMC,OAAO,GAAGJ,MAAM,CAACd,UAAU;EACjC;EACA,MAAMmB,iBAAiB,GAAGF,QAAQ,CAACG,UAAU,CAAC,GAAG,CAAC,GAAGH,QAAQ,GAAG,IAAIA,QAAQ,EAAE;EAC9E,OAAO,GAAGC,OAAO,GAAGC,iBAAiB,EAAE;AACzC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}