{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Debug function to help troubleshoot token issues\nconst debugToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.warn('No token found in localStorage');\n    return {\n      hasToken: false\n    };\n  }\n  try {\n    // Try to extract data from the token (without verification)\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error('Token is not in valid JWT format (header.payload.signature)');\n      return {\n        hasToken: true,\n        isValidFormat: false,\n        token: token.substring(0, 15) + '...'\n      };\n    }\n\n    // Decode the payload (middle part)\n    const payload = JSON.parse(atob(tokenParts[1]));\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    const isExpired = payload.exp < nowSeconds;\n    return {\n      hasToken: true,\n      isValidFormat: true,\n      token: token.substring(0, 15) + '...',\n      subject: payload.sub,\n      role: payload.role,\n      expiry,\n      isExpired,\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\n    };\n  } catch (error) {\n    console.error('Error analyzing token:', error);\n    return {\n      hasToken: true,\n      isValidFormat: false,\n      error: error.message\n    };\n  }\n};\n\n// Ensure the token is correctly set up for all requests\nconst setupTokenRefresh = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Update both instances of axios\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // Also set the global axios defaults to ensure any direct axios calls have the token\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n    // Debug info\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\n\n    // Return token info for debugging\n    const tokenInfo = debugToken();\n    console.log('Token status:', tokenInfo);\n    return tokenInfo;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('API headers cleared - no token');\n    return {\n      hasToken: false\n    };\n  }\n};\n\n// Function to store token in a consistent way\nconst storeAuthToken = token => {\n  if (!token) {\n    console.warn('Attempted to store empty token');\n    return false;\n  }\n  try {\n    // Store in localStorage\n    localStorage.setItem('token', token);\n\n    // Update axios headers\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log('Token stored and headers set');\n    return true;\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Function to clear auth token completely\nconst clearAuthToken = () => {\n  try {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('Auth token cleared completely');\n    return true;\n  } catch (error) {\n    console.error('Error clearing token:', error);\n    return false;\n  }\n};\n\n// Call this once at import time\nsetupTokenRefresh();\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(config => {\n  // Always get fresh token for each request\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Make sure to use the correct format with a space after Bearer\n    config.headers.Authorization = `Bearer ${token}`;\n\n    // For debugging, log requests to certain critical endpoints\n    const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\n    const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\n    if (isImportantRequest) {\n      console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\n    }\n  } else {\n    // Only log missing tokens for endpoints that might need them\n    if (!config.url.includes('/auth/login') && !config.url.includes('/auth/register')) {\n      console.log(`Request to ${config.url} with no token`);\n    }\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle 401 errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // If we get a 401 error, clear the token and redirect to login\n  if (error.response && error.response.status === 401) {\n    console.log('Authentication error - clearing token');\n    console.error('401 Error Details:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers,\n      data: error.config.data,\n      responseData: error.response.data\n    });\n\n    // Don't clear token for login attempts that fail with 401\n    if (!error.config.url.includes('/auth/login')) {\n      clearAuthToken();\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nconst login = credentials => {\n  // Clear any existing token before login attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/login', credentials);\n};\nconst register = userData => {\n  // Clear any existing token before register attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/register', userData);\n};\nconst getCurrentUser = () => {\n  setupTokenRefresh(); // Refresh token before making this critical request\n  return api.get('/users/me');\n};\n\n// User management\nconst getAllUsers = () => {\n  return api.get('/users');\n};\nconst getUserById = userId => {\n  return api.get(`/users/${userId}`);\n};\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\nconst deleteUser = userId => {\n  return api.delete(`/users/${userId}`);\n};\nconst createUser = userData => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\nconst createSubscription = planId => {\n  return api.post('/subscriptions', {\n    plan_id: planId\n  });\n};\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return api.post('/access/generate');\n};\nconst getAccessCodes = () => {\n  return api.get('/access/codes');\n};\nconst redeemAccessCode = accessCode => {\n  return api.post('/access/redeem', {\n    code: accessCode\n  });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return api.get('/admin/stats');\n};\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, {\n    role\n  });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', {\n    contentId,\n    contentType\n  });\n};\nconst removeFromFavorites = contentId => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', {\n    contentId,\n    watchDuration,\n    watchPercentage\n  });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\nconst createProfile = profileData => {\n  return api.post('/profiles', profileData);\n};\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\nconst deleteProfile = profileId => {\n  return api.delete(`/profiles/${profileId}`);\n};\n\n// Password management\nconst updatePassword = (currentPassword, newPassword) => {\n  return api.put('/users/password', {\n    current_password: currentPassword,\n    new_password: newPassword\n  });\n};\n\n// Password reset functions\nconst requestPasswordReset = async email => {\n  try {\n    const response = await api.post('/auth/forgot-password', {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting password reset:', error);\n    throw error;\n  }\n};\nconst resetPassword = async (token, newPassword) => {\n  try {\n    const response = await api.post('/auth/reset-password', {\n      token,\n      new_password: newPassword\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error resetting password:', error);\n    throw error;\n  }\n};\n\n// Export API functions\nexport { api, login, register, getCurrentUser, getAllUsers, getUserById, updateUser, deleteUser, createUser, getAllSubscriptionPlans, getUserSubscription, createSubscription, cancelSubscription, checkSubscription, generateAccessCode, getAccessCodes, redeemAccessCode, getDashboardStats, getAllSubscriptions, getUsersWithRoles, updateUserRole, getFavorites, addToFavorites, removeFromFavorites, getWatchHistory, addToWatchHistory, getUserProfiles, createProfile, updateProfile, deleteProfile, updatePassword, requestPasswordReset, resetPassword, storeAuthToken, clearAuthToken, setupTokenRefresh, debugToken };\nexport default api;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","debugToken","token","localStorage","getItem","console","warn","hasToken","tokenParts","split","length","error","isValidFormat","substring","payload","JSON","parse","atob","expiry","Date","exp","toLocaleString","nowSeconds","Math","floor","now","isExpired","subject","sub","role","expiresIn","message","setupTokenRefresh","defaults","headers","common","log","tokenInfo","storeAuthToken","setItem","clearAuthToken","removeItem","interceptors","request","use","config","Authorization","criticalEndpoints","isImportantRequest","some","endpoint","url","includes","Promise","reject","response","status","method","data","responseData","login","credentials","post","register","userData","getCurrentUser","get","getAllUsers","getUserById","userId","updateUser","put","deleteUser","delete","createUser","getAllSubscriptionPlans","getUserSubscription","createSubscription","planId","plan_id","cancelSubscription","checkSubscription","generateAccessCode","getAccessCodes","redeemAccessCode","accessCode","code","getDashboardStats","getAllSubscriptions","getUsersWithRoles","updateUserRole","getFavorites","addToFavorites","contentId","contentType","removeFromFavorites","getWatchHistory","addToWatchHistory","watchDuration","watchPercentage","getUserProfiles","createProfile","profileData","updateProfile","profileId","deleteProfile","updatePassword","currentPassword","newPassword","current_password","new_password","requestPasswordReset","email","resetPassword"],"sources":["D:/Movie/frontend/src/api/backendApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Debug function to help troubleshoot token issues\nconst debugToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.warn('No token found in localStorage');\n    return { hasToken: false };\n  }\n\n  try {\n    // Try to extract data from the token (without verification)\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error('Token is not in valid JWT format (header.payload.signature)');\n      return { hasToken: true, isValidFormat: false, token: token.substring(0, 15) + '...' };\n    }\n\n    // Decode the payload (middle part)\n    const payload = JSON.parse(atob(tokenParts[1]));\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    const isExpired = payload.exp < nowSeconds;\n\n    return {\n      hasToken: true,\n      isValidFormat: true,\n      token: token.substring(0, 15) + '...',\n      subject: payload.sub,\n      role: payload.role,\n      expiry,\n      isExpired,\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\n    };\n  } catch (error) {\n    console.error('Error analyzing token:', error);\n    return { hasToken: true, isValidFormat: false, error: error.message };\n  }\n};\n\n// Ensure the token is correctly set up for all requests\nconst setupTokenRefresh = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Update both instances of axios\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // Also set the global axios defaults to ensure any direct axios calls have the token\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    \n    // Debug info\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\n    \n    // Return token info for debugging\n    const tokenInfo = debugToken();\n    console.log('Token status:', tokenInfo);\n    return tokenInfo;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('API headers cleared - no token');\n    return { hasToken: false };\n  }\n};\n\n// Function to store token in a consistent way\nconst storeAuthToken = (token) => {\n  if (!token) {\n    console.warn('Attempted to store empty token');\n    return false;\n  }\n  \n  try {\n    // Store in localStorage\n    localStorage.setItem('token', token);\n    \n    // Update axios headers\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    \n    console.log('Token stored and headers set');\n    return true;\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Function to clear auth token completely\nconst clearAuthToken = () => {\n  try {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('Auth token cleared completely');\n    return true;\n  } catch (error) {\n    console.error('Error clearing token:', error);\n    return false;\n  }\n};\n\n// Call this once at import time\nsetupTokenRefresh();\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(\n  (config) => {\n    // Always get fresh token for each request\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Make sure to use the correct format with a space after Bearer\n      config.headers.Authorization = `Bearer ${token}`;\n      \n      // For debugging, log requests to certain critical endpoints\n      const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\n      const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\n      \n      if (isImportantRequest) {\n        console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\n      }\n    } else {\n      // Only log missing tokens for endpoints that might need them\n      if (!config.url.includes('/auth/login') && !config.url.includes('/auth/register')) {\n        console.log(`Request to ${config.url} with no token`);\n      }\n    }\n    return config;\n  },\n  (error) => {\n    console.error('Request error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle 401 errors\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // If we get a 401 error, clear the token and redirect to login\n    if (error.response && error.response.status === 401) {\n      console.log('Authentication error - clearing token');\n      console.error('401 Error Details:', {\n        url: error.config.url,\n        method: error.config.method,\n        headers: error.config.headers,\n        data: error.config.data,\n        responseData: error.response.data\n      });\n      \n      // Don't clear token for login attempts that fail with 401\n      if (!error.config.url.includes('/auth/login')) {\n        clearAuthToken();\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Authentication\nconst login = (credentials) => {\n  // Clear any existing token before login attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/login', credentials);\n};\n\nconst register = (userData) => {\n  // Clear any existing token before register attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/register', userData);\n};\n\nconst getCurrentUser = () => {\n  setupTokenRefresh(); // Refresh token before making this critical request\n  return api.get('/users/me');\n};\n\n// User management\nconst getAllUsers = () => {\n  return api.get('/users');\n};\n\nconst getUserById = (userId) => {\n  return api.get(`/users/${userId}`);\n};\n\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\n\nconst deleteUser = (userId) => {\n  return api.delete(`/users/${userId}`);\n};\n\nconst createUser = (userData) => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\n\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\n\nconst createSubscription = (planId) => {\n  return api.post('/subscriptions', { plan_id: planId });\n};\n\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\n\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return api.post('/access/generate');\n};\n\nconst getAccessCodes = () => {\n  return api.get('/access/codes');\n};\n\nconst redeemAccessCode = (accessCode) => {\n  return api.post('/access/redeem', { code: accessCode });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return api.get('/admin/stats');\n};\n\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\n\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\n\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, { role });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\n\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', { contentId, contentType });\n};\n\nconst removeFromFavorites = (contentId) => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\n\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', { contentId, watchDuration, watchPercentage });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\n\nconst createProfile = (profileData) => {\n  return api.post('/profiles', profileData);\n};\n\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\n\nconst deleteProfile = (profileId) => {\n  return api.delete(`/profiles/${profileId}`);\n};\n\n// Password management\nconst updatePassword = (currentPassword, newPassword) => {\n  return api.put('/users/password', { current_password: currentPassword, new_password: newPassword });\n};\n\n// Password reset functions\nconst requestPasswordReset = async (email) => {\n  try {\n    const response = await api.post('/auth/forgot-password', { email });\n    return response.data;\n  } catch (error) {\n    console.error('Error requesting password reset:', error);\n    throw error;\n  }\n};\n\nconst resetPassword = async (token, newPassword) => {\n  try {\n    const response = await api.post('/auth/reset-password', { \n      token, \n      new_password: newPassword \n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error resetting password:', error);\n    throw error;\n  }\n};\n\n// Export API functions\nexport {\n  api,\n  login,\n  register,\n  getCurrentUser,\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser,\n  createUser,\n  getAllSubscriptionPlans,\n  getUserSubscription,\n  createSubscription,\n  cancelSubscription,\n  checkSubscription,\n  generateAccessCode,\n  getAccessCodes,\n  redeemAccessCode,\n  getDashboardStats,\n  getAllSubscriptions,\n  getUsersWithRoles,\n  updateUserRole,\n  getFavorites,\n  addToFavorites,\n  removeFromFavorites,\n  getWatchHistory,\n  addToWatchHistory,\n  getUserProfiles,\n  createProfile,\n  updateProfile,\n  deleteProfile,\n  updatePassword,\n  requestPasswordReset,\n  resetPassword,\n  storeAuthToken,\n  clearAuthToken,\n  setupTokenRefresh,\n  debugToken\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}