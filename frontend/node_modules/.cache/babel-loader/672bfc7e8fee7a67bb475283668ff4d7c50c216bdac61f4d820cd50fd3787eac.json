{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api, { login as loginApi, register as registerApi, logout as logoutApi, getCurrentUser, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, storeAuthToken, clearAuthToken, setupTokenRefresh, refreshAuthToken } from '../api/backendApi';\nimport jwtDecode from 'jwt-decode';\nimport config from '../config/env';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [loadingState, setLoadingState] = useState({\n    auth: true,\n    subscription: false,\n    profile: false,\n    accessCode: false\n  });\n  const navigate = useNavigate();\n\n  // Clear any error when component mounts or unmounts\n  useEffect(() => {\n    setAuthError(null);\n    return () => {\n      setAuthError(null);\n    };\n  }, []);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    if (config.ENABLE_LOGGING) {\n      console.log(\"AuthContext mounted - checking login status\");\n    }\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token updated in another tab - refreshing auth state');\n          }\n          checkUserLoggedIn();\n        } else {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token removed in another tab - logging out');\n          }\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = useCallback(async () => {\n    try {\n      setLoadingState(prev => ({\n        ...prev,\n        auth: true\n      }));\n      await logoutApi();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingState(prev => ({\n        ...prev,\n        auth: false\n      }));\n    }\n  }, []);\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setLoadingState(prev => ({\n      ...prev,\n      auth: true\n    }));\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        if (config.ENABLE_LOGGING) {\n          console.log(\"No token found - user is not logged in\");\n        }\n        setIsAuthenticated(false);\n        setUser(null);\n        return;\n      }\n\n      // Check if token is expired\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n          if (config.ENABLE_LOGGING) {\n            console.log(\"Token expired - attempting to refresh\");\n          }\n          try {\n            // Try to refresh the token\n            await refreshAuthToken();\n            // If successful, continue with getting user data\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n            clearAuthToken();\n            setIsAuthenticated(false);\n            setUser(null);\n            return;\n          }\n        }\n\n        // Ensure token is set up correctly\n        setupTokenRefresh();\n\n        // Get current user data\n        const response = await getCurrentUser();\n        if (response.data) {\n          setUser(response.data);\n          setIsAuthenticated(true);\n\n          // Check subscription status if authenticated\n          if (response.data.user_id) {\n            checkSubscription();\n          }\n        }\n      } catch (error) {\n        console.error('Error decoding token or fetching user data:', error);\n\n        // Only clear token if it's not a network error\n        if (!error.message.includes('Network Error')) {\n          clearAuthToken();\n        }\n        setIsAuthenticated(false);\n        setUser(null);\n      }\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        auth: false\n      }));\n      setIsLoading(false);\n    }\n  };\n\n  // Register user\n  const register = async formData => {\n    setAuthError(null);\n    setLoadingState(prev => ({\n      ...prev,\n      auth: true\n    }));\n    try {\n      const response = await registerApi(formData);\n      if (response.data.user_id) {\n        // Set user data from the response\n        const userData = {\n          user_id: response.data.user_id,\n          username: formData.username,\n          email: formData.email,\n          role: 'user' // Default role for new registrations\n        };\n        setUser(userData);\n        setIsAuthenticated(true);\n        navigate('/subscriptions');\n        return true;\n      } else {\n        throw new Error('Registration response missing user ID');\n      }\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.errors) || 'Registration failed';\n      setAuthError(errorMessage);\n      return false;\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        auth: false\n      }));\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setAuthError(null);\n    setLoadingState(prev => ({\n      ...prev,\n      auth: true\n    }));\n    try {\n      const response = await loginApi(credentials);\n      if (response.data.user_id) {\n        const userData = response.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Check subscription immediately after login\n        checkSubscription();\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } else {\n        throw new Error('Login response missing user data');\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.errors) || 'Login failed';\n      setAuthError(errorMessage);\n      return false;\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        auth: false\n      }));\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    await handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated || !(user !== null && user !== void 0 && user.user_id)) return false;\n    setLoadingState(prev => ({\n      ...prev,\n      subscription: true\n    }));\n    try {\n      const response = await checkSubscriptionApi();\n\n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription,\n        accessCode: response.data.accessCode\n      }));\n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        subscription: false\n      }));\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !(user !== null && user !== void 0 && user.hasSubscription)) {\n      return {\n        success: false,\n        error: 'No active subscription'\n      };\n    }\n    setLoadingState(prev => ({\n      ...prev,\n      accessCode: true\n    }));\n    try {\n      const response = await generateAccessCodeApi();\n      if (response.data.code) {\n        return {\n          success: true,\n          code: response.data.code,\n          remaining: response.data.remaining_codes\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Failed to generate access code'\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to generate access code';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        accessCode: false\n      }));\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async code => {\n    if (!isAuthenticated) {\n      return {\n        success: false,\n        error: 'Authentication required'\n      };\n    }\n    setLoadingState(prev => ({\n      ...prev,\n      accessCode: true\n    }));\n    try {\n      const response = await redeemAccessCodeApi(code);\n      if (response.data) {\n        // Update user data with access code info\n        setUser(prevUser => ({\n          ...prevUser,\n          hasAccessCode: true,\n          accessCode: {\n            expires_at: response.data.expires_at,\n            shared_by: response.data.shared_by,\n            plan_name: response.data.plan_name\n          }\n        }));\n        return {\n          success: true\n        };\n      } else {\n        return {\n          success: false,\n          error: 'Invalid response from server'\n        };\n      }\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to redeem access code';\n      return {\n        success: false,\n        error: errorMessage\n      };\n    } finally {\n      setLoadingState(prev => ({\n        ...prev,\n        accessCode: false\n      }));\n    }\n  };\n\n  // Refresh Auth State\n  const refreshAuth = async () => {\n    await checkUserLoggedIn();\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error: authError,\n      loadingState,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      refreshAuth\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+m4ro6ZZQNcACg2D0N7P0agjZTs=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useNavigate","api","login","loginApi","register","registerApi","logout","logoutApi","getCurrentUser","checkSubscription","checkSubscriptionApi","generateAccessCode","generateAccessCodeApi","redeemAccessCode","redeemAccessCodeApi","storeAuthToken","clearAuthToken","setupTokenRefresh","refreshAuthToken","jwtDecode","config","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","authError","setAuthError","loadingState","setLoadingState","auth","subscription","profile","accessCode","navigate","ENABLE_LOGGING","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","prev","error","token","localStorage","getItem","decoded","currentTime","Date","now","exp","refreshError","response","data","user_id","message","includes","formData","userData","username","email","role","Error","_error$response","_error$response$data","_error$response2","_error$response2$data","errorMessage","errors","credentials","_error$response3","_error$response3$data","_error$response4","_error$response4$data","prevUser","hasSubscription","hasAccessCode","success","code","remaining","remaining_codes","_error$response5","_error$response5$data","expires_at","shared_by","plan_name","_error$response6","_error$response6$data","refreshAuth","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api, { \n  login as loginApi, \n  register as registerApi, \n  logout as logoutApi,\n  getCurrentUser, \n  checkSubscription as checkSubscriptionApi, \n  generateAccessCode as generateAccessCodeApi,\n  redeemAccessCode as redeemAccessCodeApi,\n  storeAuthToken,\n  clearAuthToken,\n  setupTokenRefresh,\n  refreshAuthToken\n} from '../api/backendApi';\nimport jwtDecode from 'jwt-decode';\nimport config from '../config/env';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [loadingState, setLoadingState] = useState({\n    auth: true,\n    subscription: false,\n    profile: false,\n    accessCode: false\n  });\n  const navigate = useNavigate();\n\n  // Clear any error when component mounts or unmounts\n  useEffect(() => {\n    setAuthError(null);\n    \n    return () => {\n      setAuthError(null);\n    };\n  }, []);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    if (config.ENABLE_LOGGING) {\n      console.log(\"AuthContext mounted - checking login status\");\n    }\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token updated in another tab - refreshing auth state');\n          }\n          checkUserLoggedIn();\n        } else {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token removed in another tab - logging out');\n          }\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = useCallback(async () => {\n    try {\n      setLoadingState(prev => ({ ...prev, auth: true }));\n      await logoutApi();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingState(prev => ({ ...prev, auth: false }));\n    }\n  }, []);\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setLoadingState(prev => ({ ...prev, auth: true }));\n    \n    try {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        if (config.ENABLE_LOGGING) {\n          console.log(\"No token found - user is not logged in\");\n        }\n        setIsAuthenticated(false);\n        setUser(null);\n        return;\n      }\n      \n      // Check if token is expired\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        \n        if (decoded.exp < currentTime) {\n          if (config.ENABLE_LOGGING) {\n            console.log(\"Token expired - attempting to refresh\");\n          }\n          \n          try {\n            // Try to refresh the token\n            await refreshAuthToken();\n            // If successful, continue with getting user data\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n            clearAuthToken();\n            setIsAuthenticated(false);\n            setUser(null);\n            return;\n          }\n        }\n        \n        // Ensure token is set up correctly\n        setupTokenRefresh();\n        \n        // Get current user data\n        const response = await getCurrentUser();\n        \n        if (response.data) {\n          setUser(response.data);\n          setIsAuthenticated(true);\n          \n          // Check subscription status if authenticated\n          if (response.data.user_id) {\n            checkSubscription();\n          }\n        }\n      } catch (error) {\n        console.error('Error decoding token or fetching user data:', error);\n        \n        // Only clear token if it's not a network error\n        if (!error.message.includes('Network Error')) {\n          clearAuthToken();\n        }\n        \n        setIsAuthenticated(false);\n        setUser(null);\n      }\n    } finally {\n      setLoadingState(prev => ({ ...prev, auth: false }));\n      setIsLoading(false);\n    }\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setAuthError(null);\n    setLoadingState(prev => ({ ...prev, auth: true }));\n    \n    try {\n      const response = await registerApi(formData);\n      \n      if (response.data.user_id) {\n        // Set user data from the response\n        const userData = {\n          user_id: response.data.user_id,\n          username: formData.username,\n          email: formData.email,\n          role: 'user' // Default role for new registrations\n        };\n        \n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        navigate('/subscriptions');\n        return true;\n      } else {\n        throw new Error('Registration response missing user ID');\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || \n                          error.response?.data?.errors || \n                          'Registration failed';\n      setAuthError(errorMessage);\n      return false;\n    } finally {\n      setLoadingState(prev => ({ ...prev, auth: false }));\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setAuthError(null);\n    setLoadingState(prev => ({ ...prev, auth: true }));\n    \n    try {\n      const response = await loginApi(credentials);\n      \n      if (response.data.user_id) {\n        const userData = response.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Check subscription immediately after login\n        checkSubscription();\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } else {\n        throw new Error('Login response missing user data');\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || \n                          error.response?.data?.errors || \n                          'Login failed';\n      setAuthError(errorMessage);\n      return false;\n    } finally {\n      setLoadingState(prev => ({ ...prev, auth: false }));\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    await handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated || !user?.user_id) return false;\n    \n    setLoadingState(prev => ({ ...prev, subscription: true }));\n    \n    try {\n      const response = await checkSubscriptionApi();\n      \n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription,\n        accessCode: response.data.accessCode\n      }));\n      \n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    } finally {\n      setLoadingState(prev => ({ ...prev, subscription: false }));\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user?.hasSubscription) {\n      return { success: false, error: 'No active subscription' };\n    }\n    \n    setLoadingState(prev => ({ ...prev, accessCode: true }));\n    \n    try {\n      const response = await generateAccessCodeApi();\n      \n      if (response.data.code) {\n        return { \n          success: true, \n          code: response.data.code,\n          remaining: response.data.remaining_codes\n        };\n      } else {\n        return { success: false, error: 'Failed to generate access code' };\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to generate access code';\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoadingState(prev => ({ ...prev, accessCode: false }));\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async (code) => {\n    if (!isAuthenticated) {\n      return { success: false, error: 'Authentication required' };\n    }\n    \n    setLoadingState(prev => ({ ...prev, accessCode: true }));\n    \n    try {\n      const response = await redeemAccessCodeApi(code);\n      \n      if (response.data) {\n        // Update user data with access code info\n        setUser(prevUser => ({\n          ...prevUser,\n          hasAccessCode: true,\n          accessCode: {\n            expires_at: response.data.expires_at,\n            shared_by: response.data.shared_by,\n            plan_name: response.data.plan_name\n          }\n        }));\n        \n        return { success: true };\n      } else {\n        return { success: false, error: 'Invalid response from server' };\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.message || 'Failed to redeem access code';\n      return { success: false, error: errorMessage };\n    } finally {\n      setLoadingState(prev => ({ ...prev, accessCode: false }));\n    }\n  };\n\n  // Refresh Auth State\n  const refreshAuth = async () => {\n    await checkUserLoggedIn();\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error: authError,\n        loadingState,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        refreshAuth\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}