{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst backendApi = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  withCredentials: true\n});\n\n// Add request interceptor\nbackendApi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor\nbackendApi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n\n  // If error is 401 and we haven't tried to refresh the token yet\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      // Try to refresh the token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (refreshToken) {\n        const response = await backendApi.post('/auth/refresh', {\n          refresh_token: refreshToken\n        });\n        const {\n          access_token\n        } = response.data;\n        localStorage.setItem('token', access_token);\n\n        // Retry the original request with the new token\n        originalRequest.headers.Authorization = `Bearer ${access_token}`;\n        return backendApi(originalRequest);\n      }\n    } catch (refreshError) {\n      // If refresh fails, clear tokens and redirect to login\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      window.location.href = '/login';\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth functions\nexport const login = async (username, password) => {\n  try {\n    const response = await backendApi.post('/auth/login', {\n      username,\n      password\n    });\n    const {\n      access_token,\n      user\n    } = response.data;\n    localStorage.setItem('token', access_token);\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('refreshToken');\n};\nexport const getCurrentUser = async () => {\n  try {\n    const response = await backendApi.get('/auth/me');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// User functions\nexport const getUserProfile = async () => {\n  try {\n    const response = await backendApi.get('/profile');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// Subscription functions\nexport const getSubscription = async () => {\n  try {\n    const response = await backendApi.get('/subscriptions/me');\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// User management\nconst getAllUsers = () => {\n  return backendApi.get('/users');\n};\nconst getUserById = userId => {\n  return backendApi.get(`/users/${userId}`);\n};\nconst updateUser = (userId, userData) => {\n  return backendApi.put(`/users/${userId}`, userData);\n};\nconst deleteUser = userId => {\n  return backendApi.delete(`/users/${userId}`);\n};\nconst createUser = userData => {\n  return backendApi.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return backendApi.get('/subscriptions/plans');\n};\nconst createSubscription = planId => {\n  return backendApi.post('/subscriptions', {\n    plan_id: planId\n  });\n};\nconst cancelSubscription = () => {\n  return backendApi.delete('/subscriptions/me');\n};\nconst checkSubscription = () => {\n  return backendApi.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return backendApi.post('/access-codes/generate');\n};\nconst getAccessCodes = () => {\n  return backendApi.get('/access-codes/me');\n};\nconst redeemAccessCode = code => {\n  return backendApi.post('/access-codes/redeem', {\n    code\n  });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return backendApi.get('/admin/stats');\n};\nconst getAllSubscriptions = () => {\n  return backendApi.get('/admin/subscriptions');\n};\nconst getUsersWithRoles = () => {\n  return backendApi.get('/admin/users');\n};\nconst updateUserRole = (userId, role) => {\n  return backendApi.put(`/admin/users/${userId}/role`, {\n    role\n  });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return backendApi.get('/favorites');\n};\nconst addToFavorites = (contentId, contentType) => {\n  return backendApi.post('/favorites', {\n    contentId,\n    contentType\n  });\n};\nconst removeFromFavorites = contentId => {\n  return backendApi.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return backendApi.get('/watch-history');\n};\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return backendApi.post('/watch-history', {\n    contentId,\n    watchDuration,\n    watchPercentage\n  });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return backendApi.get('/profiles');\n};\nconst createProfile = profileData => {\n  return backendApi.post('/profiles', profileData);\n};\nconst updateProfile = (profileId, profileData) => {\n  return backendApi.put(`/profiles/${profileId}`, profileData);\n};\nconst deleteProfile = profileId => {\n  return backendApi.delete(`/profiles/${profileId}`);\n};\nexport default backendApi;","map":{"version":3,"names":["axios","API_URL","backendApi","create","baseURL","headers","withCredentials","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh_token","access_token","data","setItem","refreshError","removeItem","window","location","href","login","username","password","user","logout","getCurrentUser","get","getUserProfile","getSubscription","getAllUsers","getUserById","userId","updateUser","userData","put","deleteUser","delete","createUser","getAllSubscriptionPlans","createSubscription","planId","plan_id","cancelSubscription","checkSubscription","generateAccessCode","getAccessCodes","redeemAccessCode","code","getDashboardStats","getAllSubscriptions","getUsersWithRoles","updateUserRole","role","getFavorites","addToFavorites","contentId","contentType","removeFromFavorites","getWatchHistory","addToWatchHistory","watchDuration","watchPercentage","getUserProfiles","createProfile","profileData","updateProfile","profileId","deleteProfile"],"sources":["D:/Movie/frontend/src/api/backendApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst backendApi = axios.create({\n    baseURL: API_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n    withCredentials: true\n});\n\n// Add request interceptor\nbackendApi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n    },\n    (error) => {\n        return Promise.reject(error);\n    }\n);\n\n// Add response interceptor\nbackendApi.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n        const originalRequest = error.config;\n\n        // If error is 401 and we haven't tried to refresh the token yet\n        if (error.response?.status === 401 && !originalRequest._retry) {\n            originalRequest._retry = true;\n\n            try {\n                // Try to refresh the token\n                const refreshToken = localStorage.getItem('refreshToken');\n                if (refreshToken) {\n                    const response = await backendApi.post('/auth/refresh', {\n                        refresh_token: refreshToken\n                    });\n\n                    const { access_token } = response.data;\n                    localStorage.setItem('token', access_token);\n\n                    // Retry the original request with the new token\n                    originalRequest.headers.Authorization = `Bearer ${access_token}`;\n                    return backendApi(originalRequest);\n                }\n            } catch (refreshError) {\n                // If refresh fails, clear tokens and redirect to login\n                localStorage.removeItem('token');\n                localStorage.removeItem('refreshToken');\n                window.location.href = '/login';\n                return Promise.reject(refreshError);\n            }\n        }\n\n        return Promise.reject(error);\n    }\n);\n\n// Auth functions\nexport const login = async (username, password) => {\n    try {\n        const response = await backendApi.post('/auth/login', {\n            username,\n            password\n        });\n        \n        const { access_token, user } = response.data;\n        localStorage.setItem('token', access_token);\n        return user;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n};\n\nexport const getCurrentUser = async () => {\n    try {\n        const response = await backendApi.get('/auth/me');\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// User functions\nexport const getUserProfile = async () => {\n    try {\n        const response = await backendApi.get('/profile');\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// Subscription functions\nexport const getSubscription = async () => {\n    try {\n        const response = await backendApi.get('/subscriptions/me');\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\n// User management\nconst getAllUsers = () => {\n  return backendApi.get('/users');\n};\n\nconst getUserById = (userId) => {\n  return backendApi.get(`/users/${userId}`);\n};\n\nconst updateUser = (userId, userData) => {\n  return backendApi.put(`/users/${userId}`, userData);\n};\n\nconst deleteUser = (userId) => {\n  return backendApi.delete(`/users/${userId}`);\n};\n\nconst createUser = (userData) => {\n  return backendApi.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return backendApi.get('/subscriptions/plans');\n};\n\nconst createSubscription = (planId) => {\n  return backendApi.post('/subscriptions', { plan_id: planId });\n};\n\nconst cancelSubscription = () => {\n  return backendApi.delete('/subscriptions/me');\n};\n\nconst checkSubscription = () => {\n  return backendApi.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return backendApi.post('/access-codes/generate');\n};\n\nconst getAccessCodes = () => {\n  return backendApi.get('/access-codes/me');\n};\n\nconst redeemAccessCode = (code) => {\n  return backendApi.post('/access-codes/redeem', { code });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return backendApi.get('/admin/stats');\n};\n\nconst getAllSubscriptions = () => {\n  return backendApi.get('/admin/subscriptions');\n};\n\nconst getUsersWithRoles = () => {\n  return backendApi.get('/admin/users');\n};\n\nconst updateUserRole = (userId, role) => {\n  return backendApi.put(`/admin/users/${userId}/role`, { role });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return backendApi.get('/favorites');\n};\n\nconst addToFavorites = (contentId, contentType) => {\n  return backendApi.post('/favorites', { contentId, contentType });\n};\n\nconst removeFromFavorites = (contentId) => {\n  return backendApi.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return backendApi.get('/watch-history');\n};\n\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return backendApi.post('/watch-history', { contentId, watchDuration, watchPercentage });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return backendApi.get('/profiles');\n};\n\nconst createProfile = (profileData) => {\n  return backendApi.post('/profiles', profileData);\n};\n\nconst updateProfile = (profileId, profileData) => {\n  return backendApi.put(`/profiles/${profileId}`, profileData);\n};\n\nconst deleteProfile = (profileId) => {\n  return backendApi.delete(`/profiles/${profileId}`);\n};\n\nexport default backendApi; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}