{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useLoading } from '../context/LoadingContext';\nimport { useAuth } from '../context/AuthContext';\n\n// Create axios instance with default config\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  timeout: 10000 // 10 seconds timeout\n});\n\n/**\r\n * Custom hook that returns API methods with automatic loading state management\r\n * and error handling\r\n */\nexport const useApi = () => {\n  _s();\n  const {\n    startLoading,\n    stopLoading\n  } = useLoading();\n  const {\n    token,\n    logout\n  } = useAuth();\n\n  // Configure request interceptor\n  apiClient.interceptors.request.use(config => {\n    // Add auth token if available\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Configure response interceptor\n  apiClient.interceptors.response.use(response => response, error => {\n    // Handle unauthorized errors (401)\n    if (error.response && error.response.status === 401) {\n      logout();\n    }\n    return Promise.reject(error);\n  });\n\n  /**\r\n   * Make an API request with automatic loading state\r\n   * @param {Object} options - Request options\r\n   * @param {string} options.url - The endpoint URL\r\n   * @param {string} options.method - HTTP method (get, post, put, delete)\r\n   * @param {Object} options.data - Request payload \r\n   * @param {string} options.loadingMessage - Custom loading message\r\n   * @param {boolean} options.showLoading - Whether to show loading indicator\r\n   * @returns {Promise} - Result of the API call\r\n   */\n  const request = async ({\n    url,\n    method = 'get',\n    data = null,\n    params = null,\n    loadingMessage = 'Loading...',\n    showLoading = true\n  }) => {\n    try {\n      if (showLoading) {\n        startLoading(loadingMessage);\n      }\n      const response = await apiClient({\n        url,\n        method,\n        data,\n        params\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('API Error:', error);\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'An unexpected error occurred';\n      throw new Error(errorMessage);\n    } finally {\n      if (showLoading) {\n        stopLoading();\n      }\n    }\n  };\n\n  // Convenience methods\n  return {\n    get: (url, options = {}) => request({\n      url,\n      method: 'get',\n      ...options\n    }),\n    post: (url, data, options = {}) => request({\n      url,\n      method: 'post',\n      data,\n      ...options\n    }),\n    put: (url, data, options = {}) => request({\n      url,\n      method: 'put',\n      data,\n      ...options\n    }),\n    patch: (url, data, options = {}) => request({\n      url,\n      method: 'patch',\n      data,\n      ...options\n    }),\n    delete: (url, options = {}) => request({\n      url,\n      method: 'delete',\n      ...options\n    })\n  };\n};\n_s(useApi, \"eAKKbN7WZ9yTvHMlH+yQTOGFLmM=\", false, function () {\n  return [useLoading, useAuth];\n});\nexport default apiClient;","map":{"version":3,"names":["axios","useLoading","useAuth","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","timeout","useApi","_s","startLoading","stopLoading","token","logout","interceptors","request","use","config","Authorization","error","Promise","reject","response","status","url","method","data","params","loadingMessage","showLoading","_error$response","_error$response$data","console","errorMessage","message","Error","get","options","post","put","patch","delete"],"sources":["D:/Movie/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { useLoading } from '../context/LoadingContext';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\n// Create axios instance with default config\r\nconst apiClient = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  },\r\n  timeout: 10000 // 10 seconds timeout\r\n});\r\n\r\n/**\r\n * Custom hook that returns API methods with automatic loading state management\r\n * and error handling\r\n */\r\nexport const useApi = () => {\r\n  const { startLoading, stopLoading } = useLoading();\r\n  const { token, logout } = useAuth();\r\n\r\n  // Configure request interceptor\r\n  apiClient.interceptors.request.use(\r\n    (config) => {\r\n      // Add auth token if available\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  // Configure response interceptor\r\n  apiClient.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      // Handle unauthorized errors (401)\r\n      if (error.response && error.response.status === 401) {\r\n        logout();\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  /**\r\n   * Make an API request with automatic loading state\r\n   * @param {Object} options - Request options\r\n   * @param {string} options.url - The endpoint URL\r\n   * @param {string} options.method - HTTP method (get, post, put, delete)\r\n   * @param {Object} options.data - Request payload \r\n   * @param {string} options.loadingMessage - Custom loading message\r\n   * @param {boolean} options.showLoading - Whether to show loading indicator\r\n   * @returns {Promise} - Result of the API call\r\n   */\r\n  const request = async ({\r\n    url,\r\n    method = 'get',\r\n    data = null,\r\n    params = null,\r\n    loadingMessage = 'Loading...',\r\n    showLoading = true\r\n  }) => {\r\n    try {\r\n      if (showLoading) {\r\n        startLoading(loadingMessage);\r\n      }\r\n\r\n      const response = await apiClient({\r\n        url,\r\n        method,\r\n        data,\r\n        params\r\n      });\r\n\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      \r\n      const errorMessage = \r\n        error.response?.data?.message || \r\n        error.message || \r\n        'An unexpected error occurred';\r\n        \r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      if (showLoading) {\r\n        stopLoading();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Convenience methods\r\n  return {\r\n    get: (url, options = {}) => request({ url, method: 'get', ...options }),\r\n    post: (url, data, options = {}) => request({ url, method: 'post', data, ...options }),\r\n    put: (url, data, options = {}) => request({ url, method: 'put', data, ...options }),\r\n    patch: (url, data, options = {}) => request({ url, method: 'patch', data, ...options }),\r\n    delete: (url, options = {}) => request({ url, method: 'delete', ...options })\r\n  };\r\n};\r\n\r\nexport default apiClient; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}