{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, getAccessCodes as getAccessCodesApi } from '../api/backendApi';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Token is valid - refreshing auth state\");\n\n      // Ensure token is set in headers\n      setupTokenRefresh();\n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async formData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting to register with:', {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n\n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      setUser(userData);\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n\n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n\n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot check subscription');\n      return false;\n    }\n\n    // Add a retry mechanism for reliability\n    let retries = 2;\n    let success = false;\n    let finalResponse = null;\n    while (retries >= 0 && !success) {\n      try {\n        console.log(`Checking subscription (${2 - retries}/2 attempt)`);\n        const response = await checkSubscriptionApi();\n        success = true;\n        finalResponse = response;\n        console.log('Subscription check successful:', response.data);\n      } catch (error) {\n        console.error(`Attempt ${2 - retries}/2 failed:`, error);\n        retries--;\n        if (retries >= 0) {\n          // Wait before retrying (500ms, then 1000ms)\n          await new Promise(resolve => setTimeout(resolve, 500 * (3 - retries)));\n        }\n      }\n    }\n    if (!success || !finalResponse) {\n      console.error('All subscription check attempts failed');\n\n      // Try to use cached data if available\n      const cachedSubscription = localStorage.getItem('vortextv_subscription_data');\n      if (cachedSubscription) {\n        try {\n          const parsedData = JSON.parse(cachedSubscription);\n          console.log('Using cached subscription data:', parsedData);\n\n          // Update user with cached data\n          setUser(prevUser => ({\n            ...prevUser,\n            hasSubscription: parsedData.hasSubscription,\n            hasAccessCode: parsedData.hasAccessCode,\n            subscription: parsedData.subscription,\n            subscriptionPlan: parsedData.subscriptionPlan,\n            subscriptionStatus: parsedData.status,\n            subscriptionExpiry: parsedData.expiryDate,\n            generatedCodes: parsedData.generatedCodes || 0,\n            maxAllowedCodes: parsedData.maxAllowedCodes || 0,\n            remainingCodes: parsedData.remainingCodes || 0,\n            accessCodeDetails: parsedData.accessCodeDetails\n          }));\n          return parsedData.hasSubscription && parsedData.status === 'active';\n        } catch (e) {\n          console.error('Error parsing cached subscription data:', e);\n        }\n      }\n      return false;\n    }\n    const data = finalResponse.data;\n\n    // Cache the subscription data for later use if needed\n    localStorage.setItem('vortextv_subscription_data', JSON.stringify(data));\n\n    // Update user data with subscription info\n    setUser(prevUser => ({\n      ...prevUser,\n      hasSubscription: data.hasSubscription,\n      hasAccessCode: data.hasAccessCode,\n      subscription: data.subscription,\n      // Add more detailed subscription data\n      subscriptionPlan: data.subscriptionPlan,\n      subscriptionStatus: data.status,\n      subscriptionExpiry: data.expiryDate,\n      generatedCodes: data.generatedCodes || 0,\n      maxAllowedCodes: data.maxAllowedCodes || 0,\n      remainingCodes: data.remainingCodes || 0,\n      accessCodeDetails: data.accessCodeDetails\n    }));\n\n    // Check if subscription is active (not expired)\n    const isActive = data.hasSubscription && data.status === 'active' && new Date(data.expiryDate) > new Date();\n\n    // Or check if access code is valid\n    const hasValidCode = data.hasAccessCode && data.accessCodeDetails && new Date(data.accessCodeDetails.expiryDate) > new Date();\n    const result = isActive || hasValidCode;\n    console.log(`Subscription check result: ${result ? 'Active' : 'Inactive'}`);\n    return result;\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return null;\n      }\n      const response = await generateAccessCodeApi();\n      if (response.data && response.data.success) {\n        setSuccess(`Access code generated: ${response.data.code}`);\n        // Return the generated code data\n        return response.data;\n      } else {\n        setError(response.data.error || 'Failed to generate access code');\n        return null;\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error generating access code:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to generate access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async code => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return false;\n      }\n      const response = await redeemAccessCodeApi(code);\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Error redeeming access code:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    // Guard clause - check if authenticated and has subscription\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot get access codes');\n      return {\n        success: false,\n        codes: [],\n        error: 'Authentication required'\n      };\n    }\n    if (!user || !user.hasSubscription) {\n      console.log('User has no subscription, cannot get access codes');\n      return {\n        success: false,\n        codes: [],\n        error: 'No active subscription'\n      };\n    }\n    try {\n      console.log('Fetching access codes from API');\n      const response = await getAccessCodesApi();\n\n      // Validate the response structure\n      if (response && response.data) {\n        // Check if codes array exists, if not default to empty array\n        const codes = Array.isArray(response.data.codes) ? response.data.codes : Array.isArray(response.data) ? response.data : [];\n        console.log(`Retrieved ${codes.length} access codes`);\n        return {\n          success: true,\n          codes: codes\n        };\n      } else {\n        console.error('Invalid response format from access codes API');\n        return {\n          success: false,\n          codes: [],\n          error: 'Invalid response format'\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error fetching access codes:', error);\n      return {\n        success: false,\n        codes: [],\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Error fetching access codes'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      success,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      getUserAccessCodes,\n      refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 467,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"m8OJeA/thn820aF3Qgjie0Y2NI4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","axios","jwtDecode","setupTokenRefresh","storeAuthToken","clearAuthToken","getCurrentUser","register","registerApi","login","loginApi","checkSubscription","checkSubscriptionApi","generateAccessCode","generateAccessCodeApi","redeemAccessCode","redeemAccessCodeApi","getAccessCodes","getAccessCodesApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","success","setSuccess","navigate","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","token","localStorage","getItem","decoded","currentTime","Date","now","exp","response","data","tokenData","user_id","sub","role","tokenError","formData","username","email","password","substring","userData","_error$response","_error$response$data","message","credentials","status","userResponse","userError","minimalUserData","headers","request","logout","retries","finalResponse","Promise","resolve","setTimeout","cachedSubscription","parsedData","JSON","parse","prevUser","hasSubscription","hasAccessCode","subscription","subscriptionPlan","subscriptionStatus","subscriptionExpiry","expiryDate","generatedCodes","maxAllowedCodes","remainingCodes","accessCodeDetails","setItem","stringify","isActive","hasValidCode","result","code","err","_err$response","_err$response$data","_err$response2","_err$response2$data","getUserAccessCodes","codes","Array","isArray","length","_error$response2","_error$response2$data","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, getAccessCodes as getAccessCodesApi } from '../api/backendApi';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    \n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      \n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      \n      console.log(\"Token is valid - refreshing auth state\");\n      \n      // Ensure token is set in headers\n      setupTokenRefresh();\n      \n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        \n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        \n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          \n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting to register with:', { \n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      \n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting login with credentials:', { \n        username: credentials.username, \n        password: credentials.password ? '*****' : 'empty' \n      });\n      \n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n      \n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', { status: response.status });\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        \n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n        \n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        \n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot check subscription');\n      return false;\n    }\n    \n    // Add a retry mechanism for reliability\n    let retries = 2;\n    let success = false;\n    let finalResponse = null;\n    \n    while (retries >= 0 && !success) {\n      try {\n        console.log(`Checking subscription (${2-retries}/2 attempt)`);\n        const response = await checkSubscriptionApi();\n        success = true;\n        finalResponse = response;\n        console.log('Subscription check successful:', response.data);\n      } catch (error) {\n        console.error(`Attempt ${2-retries}/2 failed:`, error);\n        retries--;\n        if (retries >= 0) {\n          // Wait before retrying (500ms, then 1000ms)\n          await new Promise(resolve => setTimeout(resolve, 500 * (3 - retries)));\n        }\n      }\n    }\n    \n    if (!success || !finalResponse) {\n      console.error('All subscription check attempts failed');\n      \n      // Try to use cached data if available\n      const cachedSubscription = localStorage.getItem('vortextv_subscription_data');\n      if (cachedSubscription) {\n        try {\n          const parsedData = JSON.parse(cachedSubscription);\n          console.log('Using cached subscription data:', parsedData);\n          \n          // Update user with cached data\n          setUser(prevUser => ({\n            ...prevUser,\n            hasSubscription: parsedData.hasSubscription,\n            hasAccessCode: parsedData.hasAccessCode,\n            subscription: parsedData.subscription,\n            subscriptionPlan: parsedData.subscriptionPlan,\n            subscriptionStatus: parsedData.status,\n            subscriptionExpiry: parsedData.expiryDate,\n            generatedCodes: parsedData.generatedCodes || 0,\n            maxAllowedCodes: parsedData.maxAllowedCodes || 0,\n            remainingCodes: parsedData.remainingCodes || 0,\n            accessCodeDetails: parsedData.accessCodeDetails\n          }));\n          \n          return parsedData.hasSubscription && parsedData.status === 'active';\n        } catch (e) {\n          console.error('Error parsing cached subscription data:', e);\n        }\n      }\n      \n      return false;\n    }\n    \n    const data = finalResponse.data;\n    \n    // Cache the subscription data for later use if needed\n    localStorage.setItem('vortextv_subscription_data', JSON.stringify(data));\n    \n    // Update user data with subscription info\n    setUser(prevUser => ({\n      ...prevUser,\n      hasSubscription: data.hasSubscription,\n      hasAccessCode: data.hasAccessCode,\n      subscription: data.subscription,\n      // Add more detailed subscription data\n      subscriptionPlan: data.subscriptionPlan,\n      subscriptionStatus: data.status,\n      subscriptionExpiry: data.expiryDate,\n      generatedCodes: data.generatedCodes || 0,\n      maxAllowedCodes: data.maxAllowedCodes || 0,\n      remainingCodes: data.remainingCodes || 0,\n      accessCodeDetails: data.accessCodeDetails\n    }));\n    \n    // Check if subscription is active (not expired)\n    const isActive = data.hasSubscription && \n                    data.status === 'active' && \n                    new Date(data.expiryDate) > new Date();\n    \n    // Or check if access code is valid\n    const hasValidCode = data.hasAccessCode &&\n                        data.accessCodeDetails &&\n                        new Date(data.accessCodeDetails.expiryDate) > new Date();\n    \n    const result = isActive || hasValidCode;\n    console.log(`Subscription check result: ${result ? 'Active' : 'Inactive'}`);\n    return result;\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return null;\n      }\n\n      const response = await generateAccessCodeApi();\n\n      if (response.data && response.data.success) {\n        setSuccess(`Access code generated: ${response.data.code}`);\n        // Return the generated code data\n        return response.data;\n      } else {\n        setError(response.data.error || 'Failed to generate access code');\n        return null;\n      }\n    } catch (err) {\n      console.error('Error generating access code:', err);\n      setError(err.response?.data?.error || 'Failed to generate access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async (code) => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return false;\n      }\n\n      const response = await redeemAccessCodeApi(code);\n\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      console.error('Error redeeming access code:', err);\n      setError(err.response?.data?.error || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    // Guard clause - check if authenticated and has subscription\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot get access codes');\n      return { success: false, codes: [], error: 'Authentication required' };\n    }\n    \n    if (!user || !user.hasSubscription) {\n      console.log('User has no subscription, cannot get access codes');\n      return { success: false, codes: [], error: 'No active subscription' };\n    }\n    \n    try {\n      console.log('Fetching access codes from API');\n      const response = await getAccessCodesApi();\n      \n      // Validate the response structure\n      if (response && response.data) {\n        // Check if codes array exists, if not default to empty array\n        const codes = Array.isArray(response.data.codes) ? response.data.codes : \n                     (Array.isArray(response.data) ? response.data : []);\n        \n        console.log(`Retrieved ${codes.length} access codes`);\n        return { success: true, codes: codes };\n      } else {\n        console.error('Invalid response format from access codes API');\n        return { success: false, codes: [], error: 'Invalid response format' };\n      }\n    } catch (error) {\n      console.error('Error fetching access codes:', error);\n      return { \n        success: false, \n        codes: [], \n        error: error.response?.data?.message || error.message || 'Error fetching access codes'\n      };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error,\n        success,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        getUserAccessCodes,\n        refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}