{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Make sure to use the correct format with a space after Bearer\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle 401 errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // If we get a 401 error, clear the token and redirect to login\n  if (error.response && error.response.status === 401) {\n    console.log('Authentication error - clearing token');\n    console.error('401 Error Details:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers,\n      data: error.config.data,\n      responseData: error.response.data\n    });\n    localStorage.removeItem('token');\n    // No need to manually redirect - the AuthContext will handle this\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nconst login = credentials => {\n  return api.post('/auth/login', credentials);\n};\nconst register = userData => {\n  return api.post('/auth/register', userData);\n};\nconst getCurrentUser = () => {\n  return api.get('/users/me');\n};\n\n// User management\nconst getAllUsers = () => {\n  return api.get('/users');\n};\nconst getUserById = userId => {\n  return api.get(`/users/${userId}`);\n};\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\nconst deleteUser = userId => {\n  return api.delete(`/users/${userId}`);\n};\nconst createUser = userData => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\nconst createSubscription = planId => {\n  return api.post('/subscriptions', {\n    plan_id: planId\n  });\n};\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return api.post('/access-codes/generate');\n};\nconst getAccessCodes = () => {\n  return api.get('/access-codes/me');\n};\nconst redeemAccessCode = code => {\n  return api.post('/access-codes/redeem', {\n    code\n  });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return api.get('/admin/stats');\n};\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, {\n    role\n  });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', {\n    contentId,\n    contentType\n  });\n};\nconst removeFromFavorites = contentId => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', {\n    contentId,\n    watchDuration,\n    watchPercentage\n  });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\nconst createProfile = profileData => {\n  return api.post('/profiles', profileData);\n};\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\nconst deleteProfile = profileId => {\n  return api.delete(`/profiles/${profileId}`);\n};\nexport default {\n  // Auth\n  login,\n  register,\n  getCurrentUser,\n  // User management\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser,\n  createUser,\n  // Subscription\n  getAllSubscriptionPlans,\n  getUserSubscription,\n  createSubscription,\n  cancelSubscription,\n  checkSubscription,\n  // Access Codes\n  generateAccessCode,\n  getAccessCodes,\n  redeemAccessCode,\n  // Admin\n  getDashboardStats,\n  getAllSubscriptions,\n  getUsersWithRoles,\n  updateUserRole,\n  // User content\n  getFavorites,\n  addToFavorites,\n  removeFromFavorites,\n  getWatchHistory,\n  addToWatchHistory,\n  // Profiles\n  getUserProfiles,\n  createProfile,\n  updateProfile,\n  deleteProfile\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","status","console","log","url","method","data","responseData","removeItem","login","credentials","post","register","userData","getCurrentUser","get","getAllUsers","getUserById","userId","updateUser","put","deleteUser","delete","createUser","getAllSubscriptionPlans","getUserSubscription","createSubscription","planId","plan_id","cancelSubscription","checkSubscription","generateAccessCode","getAccessCodes","redeemAccessCode","code","getDashboardStats","getAllSubscriptions","getUsersWithRoles","updateUserRole","role","getFavorites","addToFavorites","contentId","contentType","removeFromFavorites","getWatchHistory","addToWatchHistory","watchDuration","watchPercentage","getUserProfiles","createProfile","profileData","updateProfile","profileId","deleteProfile"],"sources":["D:/Movie/frontend/src/api/backendApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL\r\n});\r\n\r\n// Add a request interceptor to include token with each request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Make sure to use the correct format with a space after Bearer\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle 401 errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // If we get a 401 error, clear the token and redirect to login\r\n    if (error.response && error.response.status === 401) {\r\n      console.log('Authentication error - clearing token');\r\n      console.error('401 Error Details:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers,\r\n        data: error.config.data,\r\n        responseData: error.response.data\r\n      });\r\n      localStorage.removeItem('token');\r\n      // No need to manually redirect - the AuthContext will handle this\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication\r\nconst login = (credentials) => {\r\n  return api.post('/auth/login', credentials);\r\n};\r\n\r\nconst register = (userData) => {\r\n  return api.post('/auth/register', userData);\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  return api.get('/users/me');\r\n};\r\n\r\n// User management\r\nconst getAllUsers = () => {\r\n  return api.get('/users');\r\n};\r\n\r\nconst getUserById = (userId) => {\r\n  return api.get(`/users/${userId}`);\r\n};\r\n\r\nconst updateUser = (userId, userData) => {\r\n  return api.put(`/users/${userId}`, userData);\r\n};\r\n\r\nconst deleteUser = (userId) => {\r\n  return api.delete(`/users/${userId}`);\r\n};\r\n\r\nconst createUser = (userData) => {\r\n  return api.post('/users', userData);\r\n};\r\n\r\n// Subscription management\r\nconst getAllSubscriptionPlans = () => {\r\n  return api.get('/subscriptions/plans');\r\n};\r\n\r\nconst getUserSubscription = () => {\r\n  return api.get('/subscriptions/me');\r\n};\r\n\r\nconst createSubscription = (planId) => {\r\n  return api.post('/subscriptions', { plan_id: planId });\r\n};\r\n\r\nconst cancelSubscription = () => {\r\n  return api.delete('/subscriptions/me');\r\n};\r\n\r\nconst checkSubscription = () => {\r\n  return api.get('/subscriptions/check');\r\n};\r\n\r\n// Access code management\r\nconst generateAccessCode = () => {\r\n  return api.post('/access-codes/generate');\r\n};\r\n\r\nconst getAccessCodes = () => {\r\n  return api.get('/access-codes/me');\r\n};\r\n\r\nconst redeemAccessCode = (code) => {\r\n  return api.post('/access-codes/redeem', { code });\r\n};\r\n\r\n// Admin functions\r\nconst getDashboardStats = () => {\r\n  return api.get('/admin/stats');\r\n};\r\n\r\nconst getAllSubscriptions = () => {\r\n  return api.get('/admin/subscriptions');\r\n};\r\n\r\nconst getUsersWithRoles = () => {\r\n  return api.get('/admin/users');\r\n};\r\n\r\nconst updateUserRole = (userId, role) => {\r\n  return api.put(`/admin/users/${userId}/role`, { role });\r\n};\r\n\r\n// Watchlist/Favorites\r\nconst getFavorites = () => {\r\n  return api.get('/favorites');\r\n};\r\n\r\nconst addToFavorites = (contentId, contentType) => {\r\n  return api.post('/favorites', { contentId, contentType });\r\n};\r\n\r\nconst removeFromFavorites = (contentId) => {\r\n  return api.delete(`/favorites/${contentId}`);\r\n};\r\n\r\n// Watch History\r\nconst getWatchHistory = () => {\r\n  return api.get('/watch-history');\r\n};\r\n\r\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\r\n  return api.post('/watch-history', { contentId, watchDuration, watchPercentage });\r\n};\r\n\r\n// User Profiles\r\nconst getUserProfiles = () => {\r\n  return api.get('/profiles');\r\n};\r\n\r\nconst createProfile = (profileData) => {\r\n  return api.post('/profiles', profileData);\r\n};\r\n\r\nconst updateProfile = (profileId, profileData) => {\r\n  return api.put(`/profiles/${profileId}`, profileData);\r\n};\r\n\r\nconst deleteProfile = (profileId) => {\r\n  return api.delete(`/profiles/${profileId}`);\r\n};\r\n\r\nexport default {\r\n  // Auth\r\n  login,\r\n  register,\r\n  getCurrentUser,\r\n  \r\n  // User management\r\n  getAllUsers,\r\n  getUserById,\r\n  updateUser,\r\n  deleteUser,\r\n  createUser,\r\n  \r\n  // Subscription\r\n  getAllSubscriptionPlans,\r\n  getUserSubscription,\r\n  createSubscription,\r\n  cancelSubscription,\r\n  checkSubscription,\r\n  \r\n  // Access Codes\r\n  generateAccessCode,\r\n  getAccessCodes,\r\n  redeemAccessCode,\r\n  \r\n  // Admin\r\n  getDashboardStats,\r\n  getAllSubscriptions,\r\n  getUsersWithRoles,\r\n  updateUserRole,\r\n  \r\n  // User content\r\n  getFavorites,\r\n  addToFavorites,\r\n  removeFromFavorites,\r\n  getWatchHistory,\r\n  addToWatchHistory,\r\n  \r\n  // Profiles\r\n  getUserProfiles,\r\n  createProfile,\r\n  updateProfile,\r\n  deleteProfile\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}