{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\LoadingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\n// Create loading context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingContext = /*#__PURE__*/createContext({\n  isLoading: false,\n  loadingMessage: '',\n  startLoading: () => {},\n  stopLoading: () => {}\n});\n\n/**\r\n * Loading Provider component that manages global loading state\r\n */\nexport const LoadingProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('');\n\n  // Start loading with optional message\n  const startLoading = (message = 'Loading...') => {\n    setLoadingMessage(message);\n    setIsLoading(true);\n  };\n\n  // Stop loading\n  const stopLoading = () => {\n    setIsLoading(false);\n    setLoadingMessage('');\n  };\n\n  // Context value\n  const value = {\n    isLoading,\n    loadingMessage,\n    startLoading,\n    stopLoading\n  };\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: value,\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      fullScreen: true,\n      message: loadingMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(LoadingProvider, \"zRp61imFAPfXRNvj+0sfgHsZWwU=\");\n_c = LoadingProvider;\nLoadingProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\n/**\r\n * Custom hook to access the loading context\r\n */\nexport const useLoading = () => {\n  _s2();\n  const context = useContext(LoadingContext);\n  if (!context) {\n    throw new Error('useLoading must be used within a LoadingProvider');\n  }\n  return context;\n};\n_s2(useLoading, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default LoadingContext;\nvar _c;\n$RefreshReg$(_c, \"LoadingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","PropTypes","LoadingSpinner","jsxDEV","_jsxDEV","LoadingContext","isLoading","loadingMessage","startLoading","stopLoading","LoadingProvider","children","_s","setIsLoading","setLoadingMessage","message","value","Provider","fullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","useLoading","_s2","context","Error","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/LoadingContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n// Create loading context\r\nconst LoadingContext = createContext({\r\n  isLoading: false,\r\n  loadingMessage: '',\r\n  startLoading: () => {},\r\n  stopLoading: () => {}\r\n});\r\n\r\n/**\r\n * Loading Provider component that manages global loading state\r\n */\r\nexport const LoadingProvider = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState('');\r\n\r\n  // Start loading with optional message\r\n  const startLoading = (message = 'Loading...') => {\r\n    setLoadingMessage(message);\r\n    setIsLoading(true);\r\n  };\r\n\r\n  // Stop loading\r\n  const stopLoading = () => {\r\n    setIsLoading(false);\r\n    setLoadingMessage('');\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    isLoading,\r\n    loadingMessage,\r\n    startLoading,\r\n    stopLoading\r\n  };\r\n\r\n  return (\r\n    <LoadingContext.Provider value={value}>\r\n      {isLoading && <LoadingSpinner fullScreen message={loadingMessage} />}\r\n      {children}\r\n    </LoadingContext.Provider>\r\n  );\r\n};\r\n\r\nLoadingProvider.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\n/**\r\n * Custom hook to access the loading context\r\n */\r\nexport const useLoading = () => {\r\n  const context = useContext(LoadingContext);\r\n  if (!context) {\r\n    throw new Error('useLoading must be used within a LoadingProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default LoadingContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAClE,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iCAAiC;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGP,aAAa,CAAC;EACnCQ,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,EAAE;EAClBC,YAAY,EAAEA,CAAA,KAAM,CAAC,CAAC;EACtBC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACN,SAAS,EAAEO,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,cAAc,EAAEO,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;;EAExD;EACA,MAAMQ,YAAY,GAAGA,CAACO,OAAO,GAAG,YAAY,KAAK;IAC/CD,iBAAiB,CAACC,OAAO,CAAC;IAC1BF,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;;EAED;EACA,MAAMJ,WAAW,GAAGA,CAAA,KAAM;IACxBI,YAAY,CAAC,KAAK,CAAC;IACnBC,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;;EAED;EACA,MAAME,KAAK,GAAG;IACZV,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC;EAED,oBACEL,OAAA,CAACC,cAAc,CAACY,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAL,QAAA,GACnCL,SAAS,iBAAIF,OAAA,CAACF,cAAc;MAACgB,UAAU;MAACH,OAAO,EAAER;IAAe;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnEX,QAAQ;EAAA;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACV,EAAA,CA9BWF,eAAe;AAAAa,EAAA,GAAfb,eAAe;AAgC5BA,eAAe,CAACc,SAAS,GAAG;EAC1Bb,QAAQ,EAAEV,SAAS,CAACwB,IAAI,CAACC;AAC3B,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC9B,MAAMC,OAAO,GAAG9B,UAAU,CAACM,cAAc,CAAC;EAC1C,IAAI,CAACwB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,UAAU;AAQvB,eAAetB,cAAc;AAAC,IAAAkB,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}