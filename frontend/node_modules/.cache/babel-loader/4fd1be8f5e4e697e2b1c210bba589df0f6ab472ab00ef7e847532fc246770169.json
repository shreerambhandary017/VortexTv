{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\components\\\\UI\\\\LoadingSpinner.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\r\n * Loading spinner component\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingSpinner = ({\n  size = 'md',\n  color = 'primary',\n  fullScreen = false,\n  message = '',\n  className = '',\n  overlay = false\n}) => {\n  // Size classes\n  const sizeClasses = {\n    sm: 'w-4 h-4 border-2',\n    md: 'w-8 h-8 border-3',\n    lg: 'w-12 h-12 border-4',\n    xl: 'w-16 h-16 border-4'\n  };\n\n  // Color classes\n  const colorClasses = {\n    primary: 'border-blue-500',\n    secondary: 'border-gray-500',\n    success: 'border-green-500',\n    danger: 'border-red-500',\n    warning: 'border-yellow-500',\n    info: 'border-cyan-500',\n    light: 'border-gray-200',\n    dark: 'border-gray-800',\n    white: 'border-white'\n  };\n\n  // Base spinner classes\n  const spinnerClasses = `\n    inline-block rounded-full\n    border-solid border-t-transparent animate-spin\n    ${sizeClasses[size] || sizeClasses.md}\n    ${colorClasses[color] || colorClasses.primary}\n    ${className}\n  `;\n\n  // For fullscreen spinner with overlay\n  if (fullScreen) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `\n        fixed inset-0 z-50 flex flex-col items-center justify-center\n        ${overlay ? 'bg-black bg-opacity-50' : ''}\n      `,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: spinnerClasses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-4 text-sm font-medium text-gray-700 dark:text-gray-200\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  // For inline spinner\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex items-center space-x-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: spinnerClasses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-sm font-medium text-gray-700 dark:text-gray-200\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_c = LoadingSpinner;\nLoadingSpinner.propTypes = {\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\n  color: PropTypes.oneOf(['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'light', 'dark', 'white']),\n  fullScreen: PropTypes.bool,\n  message: PropTypes.string,\n  className: PropTypes.string,\n  overlay: PropTypes.bool\n};\nexport default LoadingSpinner;\nvar _c;\n$RefreshReg$(_c, \"LoadingSpinner\");","map":{"version":3,"names":["React","PropTypes","jsxDEV","_jsxDEV","LoadingSpinner","size","color","fullScreen","message","className","overlay","sizeClasses","sm","md","lg","xl","colorClasses","primary","secondary","success","danger","warning","info","light","dark","white","spinnerClasses","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","oneOf","bool","string","$RefreshReg$"],"sources":["D:/Movie/frontend/src/components/UI/LoadingSpinner.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Loading spinner component\r\n */\r\nconst LoadingSpinner = ({\r\n  size = 'md',\r\n  color = 'primary',\r\n  fullScreen = false,\r\n  message = '',\r\n  className = '',\r\n  overlay = false\r\n}) => {\r\n  // Size classes\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4 border-2',\r\n    md: 'w-8 h-8 border-3',\r\n    lg: 'w-12 h-12 border-4',\r\n    xl: 'w-16 h-16 border-4'\r\n  };\r\n  \r\n  // Color classes\r\n  const colorClasses = {\r\n    primary: 'border-blue-500',\r\n    secondary: 'border-gray-500',\r\n    success: 'border-green-500',\r\n    danger: 'border-red-500',\r\n    warning: 'border-yellow-500',\r\n    info: 'border-cyan-500',\r\n    light: 'border-gray-200',\r\n    dark: 'border-gray-800',\r\n    white: 'border-white'\r\n  };\r\n  \r\n  // Base spinner classes\r\n  const spinnerClasses = `\r\n    inline-block rounded-full\r\n    border-solid border-t-transparent animate-spin\r\n    ${sizeClasses[size] || sizeClasses.md}\r\n    ${colorClasses[color] || colorClasses.primary}\r\n    ${className}\r\n  `;\r\n  \r\n  // For fullscreen spinner with overlay\r\n  if (fullScreen) {\r\n    return (\r\n      <div className={`\r\n        fixed inset-0 z-50 flex flex-col items-center justify-center\r\n        ${overlay ? 'bg-black bg-opacity-50' : ''}\r\n      `}>\r\n        <div className={spinnerClasses}></div>\r\n        {message && (\r\n          <p className=\"mt-4 text-sm font-medium text-gray-700 dark:text-gray-200\">\r\n            {message}\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  // For inline spinner\r\n  return (\r\n    <div className=\"flex items-center space-x-2\">\r\n      <div className={spinnerClasses}></div>\r\n      {message && (\r\n        <span className=\"text-sm font-medium text-gray-700 dark:text-gray-200\">\r\n          {message}\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nLoadingSpinner.propTypes = {\r\n  size: PropTypes.oneOf(['sm', 'md', 'lg', 'xl']),\r\n  color: PropTypes.oneOf([\r\n    'primary', 'secondary', 'success', 'danger',\r\n    'warning', 'info', 'light', 'dark', 'white'\r\n  ]),\r\n  fullScreen: PropTypes.bool,\r\n  message: PropTypes.string,\r\n  className: PropTypes.string,\r\n  overlay: PropTypes.bool\r\n};\r\n\r\nexport default LoadingSpinner; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}