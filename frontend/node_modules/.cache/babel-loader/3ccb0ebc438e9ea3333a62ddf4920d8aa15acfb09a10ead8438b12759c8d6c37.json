{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api, { login as loginApi, register as registerApi, logout as logoutApi, getCurrentUser, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, storeAuthToken, clearAuthToken, setupTokenRefresh, refreshAuthToken } from '../api/backendApi';\nimport jwtDecode from 'jwt-decode';\nimport config from '../config/env';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [loadingState, setLoadingState] = useState({\n    auth: true,\n    subscription: false,\n    profile: false,\n    accessCode: false\n  });\n  const navigate = useNavigate();\n\n  // Clear any error when component mounts or unmounts\n  useEffect(() => {\n    setAuthError(null);\n    return () => {\n      setAuthError(null);\n    };\n  }, []);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    if (config.ENABLE_LOGGING) {\n      console.log(\"AuthContext mounted - checking login status\");\n    }\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token updated in another tab - refreshing auth state');\n          }\n          checkUserLoggedIn();\n        } else {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token removed in another tab - logging out');\n          }\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = useCallback(async () => {\n    try {\n      setLoadingState(prev => ({\n        ...prev,\n        auth: true\n      }));\n      await logoutApi();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingState(prev => ({\n        ...prev,\n        auth: false\n      }));\n    }\n  }, []);\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setLoadingState(prev => ({\n      ...prev,\n      auth: true\n    }));\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        if (config.ENABLE_LOGGING) {\n          console.log(\"No token found - user is not logged in\");\n        }\n        setIsAuthenticated(false);\n        setUser(null);\n        return;\n      }\n\n      // Check if token is expired\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        if (decoded.exp < currentTime) {\n          if (config.ENABLE_LOGGING) {\n            console.log(\"Token expired - attempting to refresh\");\n          }\n          try {\n            // Try to refresh the token\n            await refreshAuthToken();\n            // If successful, continue with getting user data\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n            clearAuthToken();\n            setIsAuthenticated(false);\n            setUser(null);\n            return;\n          }\n        }\n\n        // Ensure token is set up correctly\n        setupTokenRefresh();\n\n        // Get current user data\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async formData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting to register with:', {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n\n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      setUser(userData);\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n\n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n\n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    try {\n      const response = await api.checkSubscription();\n\n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription\n      }));\n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user.hasSubscription) return {\n      success: false\n    };\n    try {\n      const response = await api.generateAccessCode();\n      return {\n        success: true,\n        code: response.data.code\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      setError(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to generate access code');\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async code => {\n    try {\n      const response = await api.redeemAccessCode(code);\n\n      // Update user data with access code info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasAccessCode: true,\n        accessCode: response.data.accessCode\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      setError(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to redeem access code');\n      return {\n        success: false,\n        error: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"+m4ro6ZZQNcACg2D0N7P0agjZTs=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","useNavigate","api","login","loginApi","register","registerApi","logout","logoutApi","getCurrentUser","checkSubscription","checkSubscriptionApi","generateAccessCode","generateAccessCodeApi","redeemAccessCode","redeemAccessCodeApi","storeAuthToken","clearAuthToken","setupTokenRefresh","refreshAuthToken","jwtDecode","config","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","authError","setAuthError","loadingState","setLoadingState","auth","subscription","profile","accessCode","navigate","ENABLE_LOGGING","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","prev","error","token","localStorage","getItem","decoded","currentTime","Date","now","exp","refreshError","response","data","tokenData","user_id","sub","role","tokenError","formData","setError","username","email","password","substring","userData","_error$response","_error$response$data","message","credentials","status","userResponse","userError","minimalUserData","headers","request","prevUser","hasSubscription","hasAccessCode","success","code","_error$response2","_error$response2$data","_error$response3","_error$response3$data","_error$response4","_error$response4$data","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api, { \n  login as loginApi, \n  register as registerApi, \n  logout as logoutApi,\n  getCurrentUser, \n  checkSubscription as checkSubscriptionApi, \n  generateAccessCode as generateAccessCodeApi,\n  redeemAccessCode as redeemAccessCodeApi,\n  storeAuthToken,\n  clearAuthToken,\n  setupTokenRefresh,\n  refreshAuthToken\n} from '../api/backendApi';\nimport jwtDecode from 'jwt-decode';\nimport config from '../config/env';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  const [loadingState, setLoadingState] = useState({\n    auth: true,\n    subscription: false,\n    profile: false,\n    accessCode: false\n  });\n  const navigate = useNavigate();\n\n  // Clear any error when component mounts or unmounts\n  useEffect(() => {\n    setAuthError(null);\n    \n    return () => {\n      setAuthError(null);\n    };\n  }, []);\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    if (config.ENABLE_LOGGING) {\n      console.log(\"AuthContext mounted - checking login status\");\n    }\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token updated in another tab - refreshing auth state');\n          }\n          checkUserLoggedIn();\n        } else {\n          if (config.ENABLE_LOGGING) {\n            console.log('Token removed in another tab - logging out');\n          }\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = useCallback(async () => {\n    try {\n      setLoadingState(prev => ({ ...prev, auth: true }));\n      await logoutApi();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      setUser(null);\n      setIsAuthenticated(false);\n      setLoadingState(prev => ({ ...prev, auth: false }));\n    }\n  }, []);\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setLoadingState(prev => ({ ...prev, auth: true }));\n    \n    try {\n      const token = localStorage.getItem('token');\n      \n      if (!token) {\n        if (config.ENABLE_LOGGING) {\n          console.log(\"No token found - user is not logged in\");\n        }\n        setIsAuthenticated(false);\n        setUser(null);\n        return;\n      }\n      \n      // Check if token is expired\n      try {\n        const decoded = jwtDecode(token);\n        const currentTime = Date.now() / 1000;\n        \n        if (decoded.exp < currentTime) {\n          if (config.ENABLE_LOGGING) {\n            console.log(\"Token expired - attempting to refresh\");\n          }\n          \n          try {\n            // Try to refresh the token\n            await refreshAuthToken();\n            // If successful, continue with getting user data\n          } catch (refreshError) {\n            console.error('Token refresh failed:', refreshError);\n            clearAuthToken();\n            setIsAuthenticated(false);\n            setUser(null);\n            return;\n          }\n        }\n        \n        // Ensure token is set up correctly\n        setupTokenRefresh();\n        \n        // Get current user data\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        \n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        \n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          \n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting to register with:', { \n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      \n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting login with credentials:', { \n        username: credentials.username, \n        password: credentials.password ? '*****' : 'empty' \n      });\n      \n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n      \n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', { status: response.status });\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        \n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n        \n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        \n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    \n    try {\n      const response = await api.checkSubscription();\n      \n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription\n      }));\n      \n      return response.data.hasSubscription || response.data.hasAccessCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate access code\n  const generateAccessCode = async () => {\n    if (!isAuthenticated || !user.hasSubscription) return { success: false };\n    \n    try {\n      const response = await api.generateAccessCode();\n      return { success: true, code: response.data.code };\n    } catch (error) {\n      setError(error.response?.data?.message || 'Failed to generate access code');\n      return { success: false };\n    }\n  };\n\n  // Redeem access code\n  const redeemAccessCode = async (code) => {\n    try {\n      const response = await api.redeemAccessCode(code);\n      \n      // Update user data with access code info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasAccessCode: true,\n        accessCode: response.data.accessCode\n      }));\n      \n      return { success: true };\n    } catch (error) {\n      setError(error.response?.data?.message || 'Failed to redeem access code');\n      return { success: false, error: error.response?.data?.message };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}