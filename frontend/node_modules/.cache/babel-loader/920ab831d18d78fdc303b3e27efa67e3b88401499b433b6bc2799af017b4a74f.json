{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport apiClient from '../services/api';\nimport { login as apiLogin, logout as apiLogout, refreshAuthToken } from '../api/backendApi';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  login: () => {},\n  logout: () => {},\n  register: () => {},\n  refreshToken: () => {},\n  loading: false,\n  error: null\n});\n\n// Custom hook to use the auth context\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n// Provider component\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n\n  // Check if the user is authenticated based on token\n  const isAuthenticated = !!token && !!user;\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n          setToken(storedToken);\n          await fetchUserProfile(storedToken);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setInitialized(true);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Fetch the user profile using the token\n  const fetchUserProfile = async authToken => {\n    try {\n      setLoading(true);\n      const response = await apiClient.get('/user/profile', {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = useCallback(async credentials => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Log the credentials being sent (password masked for security)\n      console.log('Login attempt with:', {\n        username: credentials.username,\n        hasPassword: !!credentials.password\n      });\n\n      // Call the backendApi login function with credentials\n      const response = await apiLogin(credentials);\n      console.log('Login API response:', response.data);\n\n      // Handle different formats of token response\n      const accessToken = response.data.access_token || response.data.token;\n      const refreshToken = response.data.refresh_token;\n      const userData = response.data.user;\n      if (!accessToken) {\n        console.error('No access token in response:', response.data);\n        throw new Error('Authentication failed: No token received');\n      }\n      if (!userData) {\n        console.error('No user data in response:', response.data);\n        throw new Error('Authentication failed: No user data received');\n      }\n\n      // Store token in localStorage\n      localStorage.setItem('token', accessToken);\n      if (refreshToken) {\n        localStorage.setItem('refresh_token', refreshToken);\n      }\n\n      // Update state\n      setToken(accessToken);\n      setUser(userData);\n      return userData;\n    } catch (error) {\n      var _error$response, _error$response2, _error$response3, _error$response3$data;\n      console.error('Login error details:', {\n        message: error.message,\n        responseStatus: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        responseData: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n        stack: error.stack\n      });\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message || 'Failed to login. Please try again.';\n      setError(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      // Call the API logout endpoint to revoke token on the server\n      await apiLogout();\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      // Always clear local state regardless of API success\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      setToken(null);\n      setUser(null);\n      setError(null);\n    }\n  }, []);\n\n  // Register function\n  const register = useCallback(async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('Registration data from AuthContext:', userData);\n      const response = await apiClient.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n\n      // If we received tokens, store them\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        if (response.data.refresh_token) {\n          localStorage.setItem('refresh_token', response.data.refresh_token);\n        }\n        setToken(response.data.token);\n\n        // Set user data if available or fetch it\n        if (response.data.user) {\n          setUser(response.data.user);\n        } else {\n          try {\n            // Fetch user profile with the new token\n            await fetchUserProfile(response.data.token);\n          } catch (profileError) {\n            console.error('Error fetching user profile after registration:', profileError);\n            // Continue even if profile fetch fails\n          }\n        }\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response5, _error$response6, _error$response6$data, _error$response7, _error$response7$data;\n      console.error('Registration error details:', {\n        message: error.message,\n        status: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status,\n        data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data,\n        validationErrors: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.errors\n      });\n\n      // Set a more specific error message if available\n      const errorMessage = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || error.message || 'Failed to register. Please try again.';\n      setError(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Refresh token function\n  const refreshToken = useCallback(async () => {\n    try {\n      setLoading(true);\n      // Use the refreshAuthToken function from backendApi\n      const success = await refreshAuthToken();\n      if (success) {\n        // Get the new token from localStorage\n        const newToken = localStorage.getItem('token');\n        setToken(newToken);\n        return newToken;\n      }\n      throw new Error('Failed to refresh token');\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      setError(error.message || 'Failed to refresh token');\n\n      // If refresh fails, log the user out\n      logout();\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]);\n\n  // Context value\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    login,\n    logout,\n    register,\n    refreshToken,\n    loading,\n    error,\n    initialized\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"hG8tc133gILJAHFOs/22bCMf0NA=\");\n_c = AuthProvider;\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","PropTypes","apiClient","login","apiLogin","logout","apiLogout","refreshAuthToken","jsxDEV","_jsxDEV","AuthContext","user","token","isAuthenticated","register","refreshToken","loading","error","useAuth","_s","AuthProvider","children","_s2","setUser","setToken","localStorage","getItem","setLoading","setError","initialized","setInitialized","initializeAuth","storedToken","fetchUserProfile","console","authToken","response","get","headers","Authorization","data","message","credentials","log","username","hasPassword","password","accessToken","access_token","refresh_token","userData","Error","setItem","_error$response","_error$response2","_error$response3","_error$response3$data","responseStatus","status","responseData","stack","errorMessage","removeItem","post","profileError","_error$response4","_error$response5","_error$response6","_error$response6$data","_error$response7","_error$response7$data","validationErrors","errors","success","newToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport apiClient from '../services/api';\nimport { login as apiLogin, logout as apiLogout, refreshAuthToken } from '../api/backendApi';\n\n// Create context\nconst AuthContext = createContext({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  login: () => {},\n  logout: () => {},\n  register: () => {},\n  refreshToken: () => {},\n  loading: false,\n  error: null\n});\n\n// Custom hook to use the auth context\nexport const useAuth = () => useContext(AuthContext);\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n\n  // Check if the user is authenticated based on token\n  const isAuthenticated = !!token && !!user;\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        if (storedToken) {\n          setToken(storedToken);\n          await fetchUserProfile(storedToken);\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        logout();\n      } finally {\n        setInitialized(true);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  // Fetch the user profile using the token\n  const fetchUserProfile = async (authToken) => {\n    try {\n      setLoading(true);\n      const response = await apiClient.get('/user/profile', {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login function\n  const login = useCallback(async (credentials) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Log the credentials being sent (password masked for security)\n      console.log('Login attempt with:', { \n        username: credentials.username, \n        hasPassword: !!credentials.password \n      });\n      \n      // Call the backendApi login function with credentials\n      const response = await apiLogin(credentials);\n      \n      console.log('Login API response:', response.data);\n      \n      // Handle different formats of token response\n      const accessToken = response.data.access_token || response.data.token;\n      const refreshToken = response.data.refresh_token;\n      const userData = response.data.user;\n      \n      if (!accessToken) {\n        console.error('No access token in response:', response.data);\n        throw new Error('Authentication failed: No token received');\n      }\n      \n      if (!userData) {\n        console.error('No user data in response:', response.data);\n        throw new Error('Authentication failed: No user data received');\n      }\n      \n      // Store token in localStorage\n      localStorage.setItem('token', accessToken);\n      if (refreshToken) {\n        localStorage.setItem('refresh_token', refreshToken);\n      }\n      \n      // Update state\n      setToken(accessToken);\n      setUser(userData);\n      \n      return userData;\n    } catch (error) {\n      console.error('Login error details:', {\n        message: error.message,\n        responseStatus: error.response?.status,\n        responseData: error.response?.data,\n        stack: error.stack\n      });\n      \n      const errorMessage = error.response?.data?.message || \n                          error.message || \n                          'Failed to login. Please try again.';\n      \n      setError(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(async () => {\n    try {\n      // Call the API logout endpoint to revoke token on the server\n      await apiLogout();\n    } catch (error) {\n      console.error('Error during logout:', error);\n    } finally {\n      // Always clear local state regardless of API success\n      localStorage.removeItem('token');\n      localStorage.removeItem('refresh_token');\n      setToken(null);\n      setUser(null);\n      setError(null);\n    }\n  }, []);\n\n  // Register function\n  const register = useCallback(async (userData) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      console.log('Registration data from AuthContext:', userData);\n      \n      const response = await apiClient.post('/auth/register', userData);\n      console.log('Registration response:', response.data);\n      \n      // If we received tokens, store them\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        if (response.data.refresh_token) {\n          localStorage.setItem('refresh_token', response.data.refresh_token);\n        }\n        setToken(response.data.token);\n        \n        // Set user data if available or fetch it\n        if (response.data.user) {\n          setUser(response.data.user);\n        } else {\n          try {\n            // Fetch user profile with the new token\n            await fetchUserProfile(response.data.token);\n          } catch (profileError) {\n            console.error('Error fetching user profile after registration:', profileError);\n            // Continue even if profile fetch fails\n          }\n        }\n      }\n      \n      return response.data;\n    } catch (error) {\n      console.error('Registration error details:', {\n        message: error.message,\n        status: error.response?.status,\n        data: error.response?.data,\n        validationErrors: error.response?.data?.errors\n      });\n      \n      // Set a more specific error message if available\n      const errorMessage = error.response?.data?.message || \n                          error.message || \n                          'Failed to register. Please try again.';\n      setError(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Refresh token function\n  const refreshToken = useCallback(async () => {\n    try {\n      setLoading(true);\n      // Use the refreshAuthToken function from backendApi\n      const success = await refreshAuthToken();\n      if (success) {\n        // Get the new token from localStorage\n        const newToken = localStorage.getItem('token');\n        setToken(newToken);\n        return newToken;\n      }\n      throw new Error('Failed to refresh token');\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      setError(error.message || 'Failed to refresh token');\n      \n      // If refresh fails, log the user out\n      logout();\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  }, [logout]);\n\n  // Context value\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    login,\n    logout,\n    register,\n    refreshToken,\n    loading,\n    error,\n    initialized\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nAuthProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\n\nexport default AuthProvider; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}