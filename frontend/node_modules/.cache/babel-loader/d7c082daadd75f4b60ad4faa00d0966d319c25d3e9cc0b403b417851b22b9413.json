{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\LoadingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingContext = /*#__PURE__*/createContext({\n  isLoading: false,\n  loadingMessage: '',\n  startLoading: () => {},\n  stopLoading: () => {},\n  setLoadingMessage: () => {}\n});\n\n/**\r\n * Hook to use the loading context\r\n * @returns {Object} Loading context values and functions\r\n */\nexport const useLoading = () => {\n  _s();\n  return useContext(LoadingContext);\n};\n\n/**\r\n * Loading Provider Component\r\n * Provides loading state management throughout the application\r\n */\n_s(useLoading, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LoadingProvider = ({\n  children\n}) => {\n  _s2();\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingMessage, setLoadingMessage] = useState('Loading...');\n\n  // Start loading with optional message\n  const startLoading = useCallback(message => {\n    if (message) setLoadingMessage(message);\n    setIsLoading(true);\n  }, []);\n\n  // Stop loading\n  const stopLoading = useCallback(() => {\n    setIsLoading(false);\n    setLoadingMessage('Loading...'); // Reset to default\n  }, []);\n\n  // Context value\n  const value = {\n    isLoading,\n    loadingMessage,\n    startLoading,\n    stopLoading,\n    setLoadingMessage\n  };\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: value,\n    children: [isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      fullScreen: true,\n      message: loadingMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s2(LoadingProvider, \"FtuMINJxUmkzlke1HSnssu0+J1c=\");\n_c = LoadingProvider;\nLoadingProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default LoadingContext;\nvar _c;\n$RefreshReg$(_c, \"LoadingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","PropTypes","LoadingSpinner","jsxDEV","_jsxDEV","LoadingContext","isLoading","loadingMessage","startLoading","stopLoading","setLoadingMessage","useLoading","_s","LoadingProvider","children","_s2","setIsLoading","message","value","Provider","fullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/LoadingContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n// Create the context\r\nconst LoadingContext = createContext({\r\n  isLoading: false,\r\n  loadingMessage: '',\r\n  startLoading: () => {},\r\n  stopLoading: () => {},\r\n  setLoadingMessage: () => {}\r\n});\r\n\r\n/**\r\n * Hook to use the loading context\r\n * @returns {Object} Loading context values and functions\r\n */\r\nexport const useLoading = () => useContext(LoadingContext);\r\n\r\n/**\r\n * Loading Provider Component\r\n * Provides loading state management throughout the application\r\n */\r\nexport const LoadingProvider = ({ children }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [loadingMessage, setLoadingMessage] = useState('Loading...');\r\n  \r\n  // Start loading with optional message\r\n  const startLoading = useCallback((message) => {\r\n    if (message) setLoadingMessage(message);\r\n    setIsLoading(true);\r\n  }, []);\r\n\r\n  // Stop loading\r\n  const stopLoading = useCallback(() => {\r\n    setIsLoading(false);\r\n    setLoadingMessage('Loading...'); // Reset to default\r\n  }, []);\r\n\r\n  // Context value\r\n  const value = {\r\n    isLoading,\r\n    loadingMessage,\r\n    startLoading,\r\n    stopLoading,\r\n    setLoadingMessage\r\n  };\r\n\r\n  return (\r\n    <LoadingContext.Provider value={value}>\r\n      {isLoading && <LoadingSpinner fullScreen message={loadingMessage} />}\r\n      {children}\r\n    </LoadingContext.Provider>\r\n  );\r\n};\r\n\r\nLoadingProvider.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default LoadingContext; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,cAAc,MAAM,iCAAiC;;AAE5D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,cAAc,gBAAGR,aAAa,CAAC;EACnCS,SAAS,EAAE,KAAK;EAChBC,cAAc,EAAE,EAAE;EAClBC,YAAY,EAAEA,CAAA,KAAM,CAAC,CAAC;EACtBC,WAAW,EAAEA,CAAA,KAAM,CAAC,CAAC;EACrBC,iBAAiB,EAAEA,CAAA,KAAM,CAAC;AAC5B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMd,UAAU,CAACO,cAAc,CAAC;AAAA;;AAE1D;AACA;AACA;AACA;AAHAO,EAAA,CAFaD,UAAU;AAMvB,OAAO,MAAME,eAAe,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACT,SAAS,EAAEU,YAAY,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,cAAc,EAAEG,iBAAiB,CAAC,GAAGX,QAAQ,CAAC,YAAY,CAAC;;EAElE;EACA,MAAMS,YAAY,GAAGR,WAAW,CAAEiB,OAAO,IAAK;IAC5C,IAAIA,OAAO,EAAEP,iBAAiB,CAACO,OAAO,CAAC;IACvCD,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMP,WAAW,GAAGT,WAAW,CAAC,MAAM;IACpCgB,YAAY,CAAC,KAAK,CAAC;IACnBN,iBAAiB,CAAC,YAAY,CAAC,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,KAAK,GAAG;IACZZ,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC,WAAW;IACXC;EACF,CAAC;EAED,oBACEN,OAAA,CAACC,cAAc,CAACc,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAJ,QAAA,GACnCR,SAAS,iBAAIF,OAAA,CAACF,cAAc;MAACkB,UAAU;MAACH,OAAO,EAAEV;IAAe;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACnEV,QAAQ;EAAA;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B,CAAC;AAACT,GAAA,CA/BWF,eAAe;AAAAY,EAAA,GAAfZ,eAAe;AAiC5BA,eAAe,CAACa,SAAS,GAAG;EAC1BZ,QAAQ,EAAEb,SAAS,CAAC0B,IAAI,CAACC;AAC3B,CAAC;AAED,eAAevB,cAAc;AAAC,IAAAoB,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}