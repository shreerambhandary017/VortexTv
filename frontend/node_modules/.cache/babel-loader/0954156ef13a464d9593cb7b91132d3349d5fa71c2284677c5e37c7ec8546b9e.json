{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\LoadingContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingContext = /*#__PURE__*/createContext({\n  isLoading: false,\n  loadingMessage: '',\n  startLoading: () => {},\n  stopLoading: () => {}\n});\n\n/**\r\n * Hook to use the loading context\r\n * @returns {Object} Loading context values and functions\r\n */\nexport const useLoading = () => {\n  _s();\n  return useContext(LoadingContext);\n};\n\n/**\r\n * Loading Provider Component\r\n * Provides loading state management throughout the application\r\n */\n_s(useLoading, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const LoadingProvider = ({\n  children\n}) => {\n  _s2();\n  const [loadingState, setLoadingState] = useState({\n    isLoading: false,\n    message: '',\n    tasks: {}\n  });\n\n  // Start loading with an optional message and task ID\n  const startLoading = useCallback((message = '', taskId = null) => {\n    setLoadingState(prevState => {\n      const updatedTasks = {\n        ...prevState.tasks\n      };\n\n      // If taskId is provided, track it\n      if (taskId) {\n        updatedTasks[taskId] = true;\n      }\n      return {\n        isLoading: true,\n        message: message || prevState.message,\n        tasks: updatedTasks\n      };\n    });\n    return taskId || true;\n  }, []);\n\n  // Stop loading by taskId if provided, or completely if not\n  const stopLoading = useCallback((taskId = null) => {\n    setLoadingState(prevState => {\n      // If no taskId provided or no tasks are being tracked\n      if (!taskId || Object.keys(prevState.tasks).length === 0) {\n        return {\n          isLoading: false,\n          message: '',\n          tasks: {}\n        };\n      }\n\n      // Remove the specific task\n      const updatedTasks = {\n        ...prevState.tasks\n      };\n      delete updatedTasks[taskId];\n\n      // Check if there are any remaining tasks\n      const hasRemainingTasks = Object.keys(updatedTasks).length > 0;\n      return {\n        isLoading: hasRemainingTasks,\n        message: hasRemainingTasks ? prevState.message : '',\n        tasks: updatedTasks\n      };\n    });\n  }, []);\n\n  // Context value\n  const value = {\n    isLoading: loadingState.isLoading,\n    loadingMessage: loadingState.message,\n    startLoading,\n    stopLoading\n  };\n  return /*#__PURE__*/_jsxDEV(LoadingContext.Provider, {\n    value: value,\n    children: [loadingState.isLoading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      fullScreen: true,\n      message: loadingState.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 34\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s2(LoadingProvider, \"A3xXMifi7dpsCxRI9LGSPLZyHvw=\");\n_c = LoadingProvider;\nLoadingProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default LoadingContext;\nvar _c;\n$RefreshReg$(_c, \"LoadingProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","PropTypes","LoadingSpinner","jsxDEV","_jsxDEV","LoadingContext","isLoading","loadingMessage","startLoading","stopLoading","useLoading","_s","LoadingProvider","children","_s2","loadingState","setLoadingState","message","tasks","taskId","prevState","updatedTasks","Object","keys","length","hasRemainingTasks","value","Provider","fullScreen","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","node","isRequired","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/LoadingContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\n// Create the context\r\nconst LoadingContext = createContext({\r\n  isLoading: false,\r\n  loadingMessage: '',\r\n  startLoading: () => {},\r\n  stopLoading: () => {}\r\n});\r\n\r\n/**\r\n * Hook to use the loading context\r\n * @returns {Object} Loading context values and functions\r\n */\r\nexport const useLoading = () => useContext(LoadingContext);\r\n\r\n/**\r\n * Loading Provider Component\r\n * Provides loading state management throughout the application\r\n */\r\nexport const LoadingProvider = ({ children }) => {\r\n  const [loadingState, setLoadingState] = useState({\r\n    isLoading: false,\r\n    message: '',\r\n    tasks: {}\r\n  });\r\n\r\n  // Start loading with an optional message and task ID\r\n  const startLoading = useCallback((message = '', taskId = null) => {\r\n    setLoadingState(prevState => {\r\n      const updatedTasks = { ...prevState.tasks };\r\n      \r\n      // If taskId is provided, track it\r\n      if (taskId) {\r\n        updatedTasks[taskId] = true;\r\n      }\r\n      \r\n      return {\r\n        isLoading: true,\r\n        message: message || prevState.message,\r\n        tasks: updatedTasks\r\n      };\r\n    });\r\n    \r\n    return taskId || true;\r\n  }, []);\r\n\r\n  // Stop loading by taskId if provided, or completely if not\r\n  const stopLoading = useCallback((taskId = null) => {\r\n    setLoadingState(prevState => {\r\n      // If no taskId provided or no tasks are being tracked\r\n      if (!taskId || Object.keys(prevState.tasks).length === 0) {\r\n        return {\r\n          isLoading: false,\r\n          message: '',\r\n          tasks: {}\r\n        };\r\n      }\r\n      \r\n      // Remove the specific task\r\n      const updatedTasks = { ...prevState.tasks };\r\n      delete updatedTasks[taskId];\r\n      \r\n      // Check if there are any remaining tasks\r\n      const hasRemainingTasks = Object.keys(updatedTasks).length > 0;\r\n      \r\n      return {\r\n        isLoading: hasRemainingTasks,\r\n        message: hasRemainingTasks ? prevState.message : '',\r\n        tasks: updatedTasks\r\n      };\r\n    });\r\n  }, []);\r\n\r\n  // Context value\r\n  const value = {\r\n    isLoading: loadingState.isLoading,\r\n    loadingMessage: loadingState.message,\r\n    startLoading,\r\n    stopLoading\r\n  };\r\n\r\n  return (\r\n    <LoadingContext.Provider value={value}>\r\n      {loadingState.isLoading && <LoadingSpinner fullScreen message={loadingState.message} />}\r\n      {children}\r\n    </LoadingContext.Provider>\r\n  );\r\n};\r\n\r\nLoadingProvider.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default LoadingContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}