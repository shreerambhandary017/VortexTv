{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport api, { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi } from '../api/backendApi';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Token is valid - refreshing auth state\");\n\n      // Ensure token is set in headers\n      setupTokenRefresh();\n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async formData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting to register with:', {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n\n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      setUser(userData);\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n\n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n\n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    try {\n      const response = await api.checkSubscription();\n\n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription,\n        // Add more detailed subscription data\n        subscriptionPlan: response.data.subscriptionPlan,\n        subscriptionStatus: response.data.status,\n        subscriptionExpiry: response.data.expiryDate,\n        generatedCodes: response.data.generatedCodes || 0,\n        maxAllowedCodes: response.data.maxAllowedCodes || 0,\n        remainingCodes: response.data.remainingCodes || 0,\n        accessCodeDetails: response.data.accessCodeDetails\n      }));\n\n      // Check if subscription is active (not expired)\n      const isActive = response.data.hasSubscription && response.data.status === 'active' && new Date(response.data.expiryDate) > new Date();\n\n      // Or check if access code is valid\n      const hasValidCode = response.data.hasAccessCode && response.data.accessCodeDetails && new Date(response.data.accessCodeDetails.expiryDate) > new Date();\n      return isActive || hasValidCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication required');\n        return null;\n      }\n      const response = await axios.post(`${API_URL}/api/access-codes/generate`, {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data && response.data.success) {\n        setSuccess(`Access code generated: ${response.data.code}`);\n        // Return the generated code data\n        return response.data;\n      } else {\n        setError(response.data.error || 'Failed to generate access code');\n        return null;\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error generating access code:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to generate access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async code => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication required');\n        return false;\n      }\n      const response = await axios.post(`${API_URL}/api/access-codes/redeem`, {\n        code\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Error redeeming access code:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    if (!isAuthenticated || !user.hasSubscription) {\n      return {\n        success: false,\n        codes: []\n      };\n    }\n    try {\n      const response = await api.getAccessCodes();\n      return {\n        success: true,\n        codes: response.data.codes\n      };\n    } catch (error) {\n      console.error('Error fetching access codes:', error);\n      return {\n        success: false,\n        codes: []\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      success,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      getUserAccessCodes,\n      refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 402,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"m8OJeA/thn820aF3Qgjie0Y2NI4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","axios","jwtDecode","api","setupTokenRefresh","storeAuthToken","clearAuthToken","getCurrentUser","register","registerApi","login","loginApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","success","setSuccess","navigate","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","token","localStorage","getItem","decoded","currentTime","Date","now","exp","response","data","tokenData","user_id","sub","role","tokenError","formData","username","email","password","substring","userData","_error$response","_error$response$data","message","credentials","status","userResponse","userError","minimalUserData","headers","request","logout","checkSubscription","prevUser","hasSubscription","hasAccessCode","subscription","subscriptionPlan","subscriptionStatus","subscriptionExpiry","expiryDate","generatedCodes","maxAllowedCodes","remainingCodes","accessCodeDetails","isActive","hasValidCode","generateAccessCode","post","API_URL","Authorization","code","err","_err$response","_err$response$data","redeemAccessCode","_err$response2","_err$response2$data","getUserAccessCodes","codes","getAccessCodes","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport api, { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi } from '../api/backendApi';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    \n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      \n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      \n      console.log(\"Token is valid - refreshing auth state\");\n      \n      // Ensure token is set in headers\n      setupTokenRefresh();\n      \n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        \n        setUser(response.data);\n        setIsAuthenticated(true);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        \n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          \n          setUser(tokenData);\n          setIsAuthenticated(true);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting to register with:', { \n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      \n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting login with credentials:', { \n        username: credentials.username, \n        password: credentials.password ? '*****' : 'empty' \n      });\n      \n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n      \n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', { status: response.status });\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        \n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n        \n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        \n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) return false;\n    \n    try {\n      const response = await api.checkSubscription();\n      \n      // Update user data with subscription info\n      setUser(prevUser => ({\n        ...prevUser,\n        hasSubscription: response.data.hasSubscription,\n        hasAccessCode: response.data.hasAccessCode,\n        subscription: response.data.subscription,\n        // Add more detailed subscription data\n        subscriptionPlan: response.data.subscriptionPlan,\n        subscriptionStatus: response.data.status,\n        subscriptionExpiry: response.data.expiryDate,\n        generatedCodes: response.data.generatedCodes || 0,\n        maxAllowedCodes: response.data.maxAllowedCodes || 0,\n        remainingCodes: response.data.remainingCodes || 0,\n        accessCodeDetails: response.data.accessCodeDetails\n      }));\n      \n      // Check if subscription is active (not expired)\n      const isActive = response.data.hasSubscription && \n                       response.data.status === 'active' && \n                       new Date(response.data.expiryDate) > new Date();\n      \n      // Or check if access code is valid\n      const hasValidCode = response.data.hasAccessCode &&\n                           response.data.accessCodeDetails &&\n                           new Date(response.data.accessCodeDetails.expiryDate) > new Date();\n      \n      return isActive || hasValidCode;\n    } catch (error) {\n      console.error('Error checking subscription:', error);\n      return false;\n    }\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication required');\n        return null;\n      }\n\n      const response = await axios.post(\n        `${API_URL}/api/access-codes/generate`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (response.data && response.data.success) {\n        setSuccess(`Access code generated: ${response.data.code}`);\n        // Return the generated code data\n        return response.data;\n      } else {\n        setError(response.data.error || 'Failed to generate access code');\n        return null;\n      }\n    } catch (err) {\n      console.error('Error generating access code:', err);\n      setError(err.response?.data?.error || 'Failed to generate access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async (code) => {\n    setIsLoading(true);\n    try {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        setError('Authentication required');\n        return false;\n      }\n\n      const response = await axios.post(\n        `${API_URL}/api/access-codes/redeem`,\n        { code },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      console.error('Error redeeming access code:', err);\n      setError(err.response?.data?.error || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    if (!isAuthenticated || !user.hasSubscription) {\n      return { success: false, codes: [] };\n    }\n    \n    try {\n      const response = await api.getAccessCodes();\n      return { success: true, codes: response.data.codes };\n    } catch (error) {\n      console.error('Error fetching access codes:', error);\n      return { success: false, codes: [] };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error,\n        success,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        getUserAccessCodes,\n        refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}