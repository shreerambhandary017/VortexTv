{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL\n});\n\n// Debug function to help troubleshoot token issues\nconst debugToken = () => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    console.warn('No token found in localStorage');\n    return {\n      hasToken: false\n    };\n  }\n  try {\n    // Try to extract data from the token (without verification)\n    const tokenParts = token.split('.');\n    if (tokenParts.length !== 3) {\n      console.error('Token is not in valid JWT format (header.payload.signature)');\n      return {\n        hasToken: true,\n        isValidFormat: false,\n        token: token.substring(0, 15) + '...'\n      };\n    }\n\n    // Decode the payload (middle part)\n    const payload = JSON.parse(atob(tokenParts[1]));\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\n    const nowSeconds = Math.floor(Date.now() / 1000);\n    const isExpired = payload.exp < nowSeconds;\n    return {\n      hasToken: true,\n      isValidFormat: true,\n      token: token.substring(0, 15) + '...',\n      subject: payload.sub,\n      role: payload.role,\n      expiry,\n      isExpired,\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\n    };\n  } catch (error) {\n    console.error('Error analyzing token:', error);\n    return {\n      hasToken: true,\n      isValidFormat: false,\n      error: error.message\n    };\n  }\n};\n\n// Ensure the token is correctly set up for all requests\nconst setupTokenRefresh = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Update both instances of axios\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    // Also set the global axios defaults to ensure any direct axios calls have the token\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n    // Debug info\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\n\n    // Return token info for debugging\n    const tokenInfo = debugToken();\n    console.log('Token status:', tokenInfo);\n    return tokenInfo;\n  } else {\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('API headers cleared - no token');\n    return {\n      hasToken: false\n    };\n  }\n};\n\n// Function to store token in a consistent way\nconst storeAuthToken = token => {\n  if (!token) {\n    console.warn('Attempted to store empty token');\n    return false;\n  }\n  try {\n    // Store in localStorage\n    localStorage.setItem('token', token);\n\n    // Update axios headers\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    console.log('Token stored and headers set');\n    return true;\n  } catch (error) {\n    console.error('Error storing token:', error);\n    return false;\n  }\n};\n\n// Function to clear auth token completely\nconst clearAuthToken = () => {\n  try {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    delete axios.defaults.headers.common['Authorization'];\n    console.log('Auth token cleared completely');\n    return true;\n  } catch (error) {\n    console.error('Error clearing token:', error);\n    return false;\n  }\n};\n\n// Call this once at import time\nsetupTokenRefresh();\n\n// Add a request interceptor to include token with each request\napi.interceptors.request.use(config => {\n  // Always get fresh token for each request\n  const token = localStorage.getItem('token');\n  if (token) {\n    // Make sure to use the correct format with a space after Bearer\n    config.headers.Authorization = `Bearer ${token}`;\n\n    // For debugging, log requests to certain critical endpoints\n    const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\n    const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\n    if (isImportantRequest) {\n      console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\n    }\n  } else {\n    // Only log missing tokens for endpoints that might need them\n    if (!config.url.includes('/auth/login') && !config.url.includes('/auth/register')) {\n      console.log(`Request to ${config.url} with no token`);\n    }\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle 401 errors\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  // If we get a 401 error, clear the token and redirect to login\n  if (error.response && error.response.status === 401) {\n    console.log('Authentication error - clearing token');\n    console.error('401 Error Details:', {\n      url: error.config.url,\n      method: error.config.method,\n      headers: error.config.headers,\n      data: error.config.data,\n      responseData: error.response.data\n    });\n\n    // Don't clear token for login attempts that fail with 401\n    if (!error.config.url.includes('/auth/login')) {\n      clearAuthToken();\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Authentication\nconst login = credentials => {\n  // Clear any existing token before login attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/login', credentials);\n};\nconst register = userData => {\n  // Clear any existing token before register attempt\n  delete api.defaults.headers.common['Authorization'];\n  return api.post('/auth/register', userData);\n};\nconst getCurrentUser = () => {\n  setupTokenRefresh(); // Refresh token before making this critical request\n  return api.get('/users/me');\n};\n\n// User management\nconst getAllUsers = () => {\n  return api.get('/users');\n};\nconst getUserById = userId => {\n  return api.get(`/users/${userId}`);\n};\nconst updateUser = (userId, userData) => {\n  return api.put(`/users/${userId}`, userData);\n};\nconst deleteUser = userId => {\n  return api.delete(`/users/${userId}`);\n};\nconst createUser = userData => {\n  return api.post('/users', userData);\n};\n\n// Subscription management\nconst getAllSubscriptionPlans = () => {\n  return api.get('/subscriptions/plans');\n};\nconst getUserSubscription = () => {\n  return api.get('/subscriptions/me');\n};\nconst createSubscription = planId => {\n  return api.post('/subscriptions', {\n    plan_id: planId\n  });\n};\nconst cancelSubscription = () => {\n  return api.delete('/subscriptions/me');\n};\nconst checkSubscription = () => {\n  return api.get('/subscriptions/check');\n};\n\n// Access code management\nconst generateAccessCode = () => {\n  return api.post('/access-codes/generate');\n};\nconst getAccessCodes = () => {\n  return api.get('/access-codes/me');\n};\nconst redeemAccessCode = code => {\n  return api.post('/access-codes/redeem', {\n    code\n  });\n};\n\n// Admin functions\nconst getDashboardStats = () => {\n  return api.get('/admin/stats');\n};\nconst getAllSubscriptions = () => {\n  return api.get('/admin/subscriptions');\n};\nconst getUsersWithRoles = () => {\n  return api.get('/admin/users');\n};\nconst updateUserRole = (userId, role) => {\n  return api.put(`/admin/users/${userId}/role`, {\n    role\n  });\n};\n\n// Watchlist/Favorites\nconst getFavorites = () => {\n  return api.get('/favorites');\n};\nconst addToFavorites = (contentId, contentType) => {\n  return api.post('/favorites', {\n    contentId,\n    contentType\n  });\n};\nconst removeFromFavorites = contentId => {\n  return api.delete(`/favorites/${contentId}`);\n};\n\n// Watch History\nconst getWatchHistory = () => {\n  return api.get('/watch-history');\n};\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\n  return api.post('/watch-history', {\n    contentId,\n    watchDuration,\n    watchPercentage\n  });\n};\n\n// User Profiles\nconst getUserProfiles = () => {\n  return api.get('/profiles');\n};\nconst createProfile = profileData => {\n  return api.post('/profiles', profileData);\n};\nconst updateProfile = (profileId, profileData) => {\n  return api.put(`/profiles/${profileId}`, profileData);\n};\nconst deleteProfile = profileId => {\n  return api.delete(`/profiles/${profileId}`);\n};\nexport { debugToken, setupTokenRefresh, storeAuthToken, clearAuthToken };\nexport default {\n  // Auth\n  login,\n  register,\n  getCurrentUser,\n  // User management\n  getAllUsers,\n  getUserById,\n  updateUser,\n  deleteUser,\n  createUser,\n  // Subscription\n  getAllSubscriptionPlans,\n  getUserSubscription,\n  createSubscription,\n  cancelSubscription,\n  checkSubscription,\n  // Access Codes\n  generateAccessCode,\n  getAccessCodes,\n  redeemAccessCode,\n  // Admin\n  getDashboardStats,\n  getAllSubscriptions,\n  getUsersWithRoles,\n  updateUserRole,\n  // User content\n  getFavorites,\n  addToFavorites,\n  removeFromFavorites,\n  getWatchHistory,\n  addToWatchHistory,\n  // Profiles\n  getUserProfiles,\n  createProfile,\n  updateProfile,\n  deleteProfile,\n  // Debug\n  debugToken,\n  setupTokenRefresh,\n  storeAuthToken,\n  clearAuthToken\n};","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","debugToken","token","localStorage","getItem","console","warn","hasToken","tokenParts","split","length","error","isValidFormat","substring","payload","JSON","parse","atob","expiry","Date","exp","toLocaleString","nowSeconds","Math","floor","now","isExpired","subject","sub","role","expiresIn","message","setupTokenRefresh","defaults","headers","common","log","tokenInfo","storeAuthToken","setItem","clearAuthToken","removeItem","interceptors","request","use","config","Authorization","criticalEndpoints","isImportantRequest","some","endpoint","url","includes","Promise","reject","response","status","method","data","responseData","login","credentials","post","register","userData","getCurrentUser","get","getAllUsers","getUserById","userId","updateUser","put","deleteUser","delete","createUser","getAllSubscriptionPlans","getUserSubscription","createSubscription","planId","plan_id","cancelSubscription","checkSubscription","generateAccessCode","getAccessCodes","redeemAccessCode","code","getDashboardStats","getAllSubscriptions","getUsersWithRoles","updateUserRole","getFavorites","addToFavorites","contentId","contentType","removeFromFavorites","getWatchHistory","addToWatchHistory","watchDuration","watchPercentage","getUserProfiles","createProfile","profileData","updateProfile","profileId","deleteProfile"],"sources":["D:/Movie/frontend/src/api/backendApi.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL\r\n});\r\n\r\n// Debug function to help troubleshoot token issues\r\nconst debugToken = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (!token) {\r\n    console.warn('No token found in localStorage');\r\n    return { hasToken: false };\r\n  }\r\n\r\n  try {\r\n    // Try to extract data from the token (without verification)\r\n    const tokenParts = token.split('.');\r\n    if (tokenParts.length !== 3) {\r\n      console.error('Token is not in valid JWT format (header.payload.signature)');\r\n      return { hasToken: true, isValidFormat: false, token: token.substring(0, 15) + '...' };\r\n    }\r\n\r\n    // Decode the payload (middle part)\r\n    const payload = JSON.parse(atob(tokenParts[1]));\r\n    const expiry = new Date(payload.exp * 1000).toLocaleString();\r\n    const nowSeconds = Math.floor(Date.now() / 1000);\r\n    const isExpired = payload.exp < nowSeconds;\r\n\r\n    return {\r\n      hasToken: true,\r\n      isValidFormat: true,\r\n      token: token.substring(0, 15) + '...',\r\n      subject: payload.sub,\r\n      role: payload.role,\r\n      expiry,\r\n      isExpired,\r\n      expiresIn: isExpired ? 'Expired' : `${Math.floor((payload.exp - nowSeconds) / 60)} minutes`\r\n    };\r\n  } catch (error) {\r\n    console.error('Error analyzing token:', error);\r\n    return { hasToken: true, isValidFormat: false, error: error.message };\r\n  }\r\n};\r\n\r\n// Ensure the token is correctly set up for all requests\r\nconst setupTokenRefresh = () => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    // Update both instances of axios\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    // Also set the global axios defaults to ensure any direct axios calls have the token\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    \r\n    // Debug info\r\n    console.log('API headers updated with token:', token.substring(0, 15) + '...');\r\n    \r\n    // Return token info for debugging\r\n    const tokenInfo = debugToken();\r\n    console.log('Token status:', tokenInfo);\r\n    return tokenInfo;\r\n  } else {\r\n    delete api.defaults.headers.common['Authorization'];\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    console.log('API headers cleared - no token');\r\n    return { hasToken: false };\r\n  }\r\n};\r\n\r\n// Function to store token in a consistent way\r\nconst storeAuthToken = (token) => {\r\n  if (!token) {\r\n    console.warn('Attempted to store empty token');\r\n    return false;\r\n  }\r\n  \r\n  try {\r\n    // Store in localStorage\r\n    localStorage.setItem('token', token);\r\n    \r\n    // Update axios headers\r\n    api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n    \r\n    console.log('Token stored and headers set');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error storing token:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to clear auth token completely\r\nconst clearAuthToken = () => {\r\n  try {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    console.log('Auth token cleared completely');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing token:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Call this once at import time\r\nsetupTokenRefresh();\r\n\r\n// Add a request interceptor to include token with each request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    // Always get fresh token for each request\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Make sure to use the correct format with a space after Bearer\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n      \r\n      // For debugging, log requests to certain critical endpoints\r\n      const criticalEndpoints = ['/users/me', '/auth/login', '/admin/'];\r\n      const isImportantRequest = criticalEndpoints.some(endpoint => config.url.includes(endpoint));\r\n      \r\n      if (isImportantRequest) {\r\n        console.log(`Critical request to ${config.url} with token: ${token.substring(0, 15)}...`);\r\n      }\r\n    } else {\r\n      // Only log missing tokens for endpoints that might need them\r\n      if (!config.url.includes('/auth/login') && !config.url.includes('/auth/register')) {\r\n        console.log(`Request to ${config.url} with no token`);\r\n      }\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('Request error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor to handle 401 errors\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // If we get a 401 error, clear the token and redirect to login\r\n    if (error.response && error.response.status === 401) {\r\n      console.log('Authentication error - clearing token');\r\n      console.error('401 Error Details:', {\r\n        url: error.config.url,\r\n        method: error.config.method,\r\n        headers: error.config.headers,\r\n        data: error.config.data,\r\n        responseData: error.response.data\r\n      });\r\n      \r\n      // Don't clear token for login attempts that fail with 401\r\n      if (!error.config.url.includes('/auth/login')) {\r\n        clearAuthToken();\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Authentication\r\nconst login = (credentials) => {\r\n  // Clear any existing token before login attempt\r\n  delete api.defaults.headers.common['Authorization'];\r\n  return api.post('/auth/login', credentials);\r\n};\r\n\r\nconst register = (userData) => {\r\n  // Clear any existing token before register attempt\r\n  delete api.defaults.headers.common['Authorization'];\r\n  return api.post('/auth/register', userData);\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n  setupTokenRefresh(); // Refresh token before making this critical request\r\n  return api.get('/users/me');\r\n};\r\n\r\n// User management\r\nconst getAllUsers = () => {\r\n  return api.get('/users');\r\n};\r\n\r\nconst getUserById = (userId) => {\r\n  return api.get(`/users/${userId}`);\r\n};\r\n\r\nconst updateUser = (userId, userData) => {\r\n  return api.put(`/users/${userId}`, userData);\r\n};\r\n\r\nconst deleteUser = (userId) => {\r\n  return api.delete(`/users/${userId}`);\r\n};\r\n\r\nconst createUser = (userData) => {\r\n  return api.post('/users', userData);\r\n};\r\n\r\n// Subscription management\r\nconst getAllSubscriptionPlans = () => {\r\n  return api.get('/subscriptions/plans');\r\n};\r\n\r\nconst getUserSubscription = () => {\r\n  return api.get('/subscriptions/me');\r\n};\r\n\r\nconst createSubscription = (planId) => {\r\n  return api.post('/subscriptions', { plan_id: planId });\r\n};\r\n\r\nconst cancelSubscription = () => {\r\n  return api.delete('/subscriptions/me');\r\n};\r\n\r\nconst checkSubscription = () => {\r\n  return api.get('/subscriptions/check');\r\n};\r\n\r\n// Access code management\r\nconst generateAccessCode = () => {\r\n  return api.post('/access-codes/generate');\r\n};\r\n\r\nconst getAccessCodes = () => {\r\n  return api.get('/access-codes/me');\r\n};\r\n\r\nconst redeemAccessCode = (code) => {\r\n  return api.post('/access-codes/redeem', { code });\r\n};\r\n\r\n// Admin functions\r\nconst getDashboardStats = () => {\r\n  return api.get('/admin/stats');\r\n};\r\n\r\nconst getAllSubscriptions = () => {\r\n  return api.get('/admin/subscriptions');\r\n};\r\n\r\nconst getUsersWithRoles = () => {\r\n  return api.get('/admin/users');\r\n};\r\n\r\nconst updateUserRole = (userId, role) => {\r\n  return api.put(`/admin/users/${userId}/role`, { role });\r\n};\r\n\r\n// Watchlist/Favorites\r\nconst getFavorites = () => {\r\n  return api.get('/favorites');\r\n};\r\n\r\nconst addToFavorites = (contentId, contentType) => {\r\n  return api.post('/favorites', { contentId, contentType });\r\n};\r\n\r\nconst removeFromFavorites = (contentId) => {\r\n  return api.delete(`/favorites/${contentId}`);\r\n};\r\n\r\n// Watch History\r\nconst getWatchHistory = () => {\r\n  return api.get('/watch-history');\r\n};\r\n\r\nconst addToWatchHistory = (contentId, watchDuration, watchPercentage) => {\r\n  return api.post('/watch-history', { contentId, watchDuration, watchPercentage });\r\n};\r\n\r\n// User Profiles\r\nconst getUserProfiles = () => {\r\n  return api.get('/profiles');\r\n};\r\n\r\nconst createProfile = (profileData) => {\r\n  return api.post('/profiles', profileData);\r\n};\r\n\r\nconst updateProfile = (profileId, profileData) => {\r\n  return api.put(`/profiles/${profileId}`, profileData);\r\n};\r\n\r\nconst deleteProfile = (profileId) => {\r\n  return api.delete(`/profiles/${profileId}`);\r\n};\r\n\r\nexport { \r\n  debugToken, \r\n  setupTokenRefresh, \r\n  storeAuthToken, \r\n  clearAuthToken \r\n};\r\n\r\nexport default {\r\n  // Auth\r\n  login,\r\n  register,\r\n  getCurrentUser,\r\n  \r\n  // User management\r\n  getAllUsers,\r\n  getUserById,\r\n  updateUser,\r\n  deleteUser,\r\n  createUser,\r\n  \r\n  // Subscription\r\n  getAllSubscriptionPlans,\r\n  getUserSubscription,\r\n  createSubscription,\r\n  cancelSubscription,\r\n  checkSubscription,\r\n  \r\n  // Access Codes\r\n  generateAccessCode,\r\n  getAccessCodes,\r\n  redeemAccessCode,\r\n  \r\n  // Admin\r\n  getDashboardStats,\r\n  getAllSubscriptions,\r\n  getUsersWithRoles,\r\n  updateUserRole,\r\n  \r\n  // User content\r\n  getFavorites,\r\n  addToFavorites,\r\n  removeFromFavorites,\r\n  getWatchHistory,\r\n  addToWatchHistory,\r\n  \r\n  // Profiles\r\n  getUserProfiles,\r\n  createProfile,\r\n  updateProfile,\r\n  deleteProfile,\r\n  \r\n  // Debug\r\n  debugToken,\r\n  setupTokenRefresh,\r\n  storeAuthToken,\r\n  clearAuthToken\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}