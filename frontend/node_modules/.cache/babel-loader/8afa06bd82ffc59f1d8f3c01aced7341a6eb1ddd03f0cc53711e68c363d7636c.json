{"ast":null,"code":"var _jsxFileName = \"D:\\\\Movie\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, getAccessCodes as getAccessCodesApi } from '../api/backendApi';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n\n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = e => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      console.log(\"Token is valid - refreshing auth state\");\n\n      // Ensure token is set in headers\n      setupTokenRefresh();\n\n      // First check if we have cached subscription data\n      let cachedSubscriptionData = null;\n      try {\n        const cachedData = localStorage.getItem('vortextv_subscription_data');\n        if (cachedData) {\n          cachedSubscriptionData = JSON.parse(cachedData);\n          console.log(\"Found cached subscription data:\", cachedSubscriptionData);\n        }\n      } catch (cacheError) {\n        console.error(\"Error reading cached subscription data:\", cacheError);\n      }\n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n\n        // Merge subscription data from cache into user object if available\n        let userData = response.data;\n        if (cachedSubscriptionData) {\n          userData = {\n            ...userData,\n            hasSubscription: cachedSubscriptionData.hasSubscription,\n            hasAccessCode: cachedSubscriptionData.hasAccessCode,\n            subscription: cachedSubscriptionData.subscription,\n            subscriptionPlan: cachedSubscriptionData.subscriptionPlan,\n            subscriptionStatus: cachedSubscriptionData.status,\n            subscriptionExpiry: cachedSubscriptionData.expiryDate,\n            generatedCodes: cachedSubscriptionData.generatedCodes || 0,\n            maxAllowedCodes: cachedSubscriptionData.maxAllowedCodes || 0,\n            remainingCodes: cachedSubscriptionData.remainingCodes || 0,\n            accessCodeDetails: cachedSubscriptionData.accessCodeDetails\n          };\n          console.log(\"Merged cached subscription data with user data\");\n        }\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Immediately after auth is established, trigger a subscription check in background\n        // This will update the cached data with fresh data from the server\n        setTimeout(() => {\n          console.log(\"Performing background subscription check after login\");\n          checkSubscription().then(() => {\n            console.log(\"Background subscription check completed\");\n          }).catch(err => {\n            console.error(\"Background subscription check failed:\", err);\n          });\n        }, 200);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n\n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n\n          // Merge with cached subscription data if available\n          if (cachedSubscriptionData) {\n            Object.assign(tokenData, {\n              hasSubscription: cachedSubscriptionData.hasSubscription,\n              hasAccessCode: cachedSubscriptionData.hasAccessCode,\n              subscription: cachedSubscriptionData.subscription,\n              subscriptionPlan: cachedSubscriptionData.subscriptionPlan,\n              subscriptionStatus: cachedSubscriptionData.status,\n              subscriptionExpiry: cachedSubscriptionData.expiryDate,\n              generatedCodes: cachedSubscriptionData.generatedCodes || 0,\n              maxAllowedCodes: cachedSubscriptionData.maxAllowedCodes || 0,\n              remainingCodes: cachedSubscriptionData.remainingCodes || 0,\n              accessCodeDetails: cachedSubscriptionData.accessCodeDetails\n            });\n            console.log(\"Merged cached subscription data with token data\");\n          }\n          setUser(tokenData);\n          setIsAuthenticated(true);\n\n          // Try to get fresh subscription data\n          setTimeout(() => checkSubscription(), 300);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async formData => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting to register with:', {\n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n\n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      setUser(userData);\n      setIsAuthenticated(true);\n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Registration error:', error);\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      console.log('Attempting login with credentials:', {\n        username: credentials.username,\n        password: credentials.password ? '*****' : 'empty'\n      });\n\n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n\n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', {\n        status: response.status\n      });\n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n\n      // Store token consistently\n      storeAuthToken(token);\n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n\n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n\n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n\n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n\n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot check subscription');\n      return false;\n    }\n\n    // Add a retry mechanism for reliability\n    let retries = 2;\n    let success = false;\n    let finalResponse = null;\n    while (retries >= 0 && !success) {\n      try {\n        console.log(`Checking subscription (${2 - retries}/2 attempt)`);\n        const response = await checkSubscriptionApi();\n        success = true;\n        finalResponse = response;\n        console.log('Subscription check successful:', response.data);\n      } catch (error) {\n        console.error(`Attempt ${2 - retries}/2 failed:`, error);\n        retries--;\n        if (retries >= 0) {\n          // Wait before retrying (500ms, then 1000ms)\n          await new Promise(resolve => setTimeout(resolve, 500 * (3 - retries)));\n        }\n      }\n    }\n    if (!success || !finalResponse) {\n      console.error('All subscription check attempts failed');\n\n      // Try to use cached data if available\n      const cachedSubscription = localStorage.getItem('vortextv_subscription_data');\n      if (cachedSubscription) {\n        try {\n          const parsedData = JSON.parse(cachedSubscription);\n          console.log('Using cached subscription data:', parsedData);\n\n          // Update user with cached data\n          setUser(prevUser => ({\n            ...prevUser,\n            hasSubscription: parsedData.hasSubscription,\n            hasAccessCode: parsedData.hasAccessCode,\n            subscription: parsedData.subscription,\n            subscriptionPlan: parsedData.subscriptionPlan,\n            subscriptionStatus: parsedData.status,\n            subscriptionExpiry: parsedData.expiryDate,\n            generatedCodes: parsedData.generatedCodes || 0,\n            maxAllowedCodes: parsedData.maxAllowedCodes || 0,\n            remainingCodes: parsedData.remainingCodes || 0,\n            accessCodeDetails: parsedData.accessCodeDetails\n          }));\n          return parsedData.hasSubscription && parsedData.status === 'active';\n        } catch (e) {\n          console.error('Error parsing cached subscription data:', e);\n        }\n      }\n      return false;\n    }\n    const data = finalResponse.data;\n\n    // Cache the subscription data for later use if needed\n    localStorage.setItem('vortextv_subscription_data', JSON.stringify(data));\n\n    // Update user data with subscription info\n    setUser(prevUser => ({\n      ...prevUser,\n      hasSubscription: data.hasSubscription,\n      hasAccessCode: data.hasAccessCode,\n      subscription: data.subscription,\n      // Add more detailed subscription data\n      subscriptionPlan: data.subscriptionPlan,\n      subscriptionStatus: data.status,\n      subscriptionExpiry: data.expiryDate,\n      generatedCodes: data.generatedCodes || 0,\n      maxAllowedCodes: data.maxAllowedCodes || 0,\n      remainingCodes: data.remainingCodes || 0,\n      accessCodeDetails: data.accessCodeDetails\n    }));\n\n    // Check if subscription is active (not expired)\n    const isActive = data.hasSubscription && data.status === 'active' && new Date(data.expiryDate) > new Date();\n\n    // Or check if access code is valid\n    const hasValidCode = data.hasAccessCode && data.accessCodeDetails && new Date(data.accessCodeDetails.expiryDate) > new Date();\n    const result = isActive || hasValidCode;\n    console.log(`Subscription check result: ${result ? 'Active' : 'Inactive'}`);\n    return result;\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    console.log('AuthContext: Starting access code generation');\n\n    // Make sure subscription data is up-to-date before generating\n    try {\n      if (!isAuthenticated) {\n        console.error('AuthContext: Cannot generate code - not authenticated');\n        setError('Authentication required');\n        return {\n          success: false,\n          error: 'Authentication required'\n        };\n      }\n\n      // Check subscription status directly from user object\n      if (!user) {\n        console.error('AuthContext: Cannot generate code - no user data');\n        setError('User data unavailable');\n        return {\n          success: false,\n          error: 'User data unavailable'\n        };\n      }\n      if (!user.hasSubscription) {\n        console.error('AuthContext: Cannot generate code - no active subscription');\n        setError('No active subscription found');\n        return {\n          success: false,\n          error: 'No active subscription found'\n        };\n      }\n\n      // Debug the request before sending\n      console.log('AuthContext: Making API call to generate access code');\n\n      // Make the API request with specific headers and timeout\n      const response = await generateAccessCodeApi();\n      console.log('AuthContext: Access code API response:', response.data);\n      if (response.data && response.data.success) {\n        const successMsg = `Access code generated: ${response.data.code}`;\n        console.log('AuthContext: ' + successMsg);\n        setSuccess(successMsg);\n\n        // Update subscription data in user context\n        setUser(prevUser => ({\n          ...prevUser,\n          remainingCodes: response.data.remainingCodes,\n          generatedCodes: response.data.generatedCodes\n        }));\n\n        // Return the generated code data\n        return response.data;\n      } else {\n        var _response$data;\n        const errorMsg = ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.error) || 'Failed to generate access code';\n        console.error('AuthContext: Access code generation failed:', errorMsg);\n        setError(errorMsg);\n        return {\n          success: false,\n          error: errorMsg\n        };\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('AuthContext: Error generating access code:', err);\n      const errorMsg = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Failed to generate access code';\n      setError(errorMsg);\n      return {\n        success: false,\n        error: errorMsg,\n        details: err.toString()\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async code => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return false;\n      }\n      const response = await redeemAccessCodeApi(code);\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      console.error('Error redeeming access code:', err);\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.error) || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    // Guard clause - check if authenticated and has subscription\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot get access codes');\n      return {\n        success: false,\n        codes: [],\n        error: 'Authentication required'\n      };\n    }\n    if (!user || !user.hasSubscription) {\n      console.log('User has no subscription, cannot get access codes');\n      return {\n        success: false,\n        codes: [],\n        error: 'No active subscription'\n      };\n    }\n    try {\n      console.log('Fetching access codes from API');\n      const response = await getAccessCodesApi();\n\n      // Validate the response structure\n      if (response && response.data) {\n        // Check if codes array exists, if not default to empty array\n        const codes = Array.isArray(response.data.codes) ? response.data.codes : Array.isArray(response.data) ? response.data : [];\n        console.log(`Retrieved ${codes.length} access codes`);\n        return {\n          success: true,\n          codes: codes\n        };\n      } else {\n        console.error('Invalid response format from access codes API');\n        return {\n          success: false,\n          codes: [],\n          error: 'Invalid response format'\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Error fetching access codes:', error);\n      return {\n        success: false,\n        codes: [],\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message || 'Error fetching access codes'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isLoading,\n      error,\n      success,\n      register,\n      login,\n      logout,\n      checkSubscription,\n      generateAccessCode,\n      redeemAccessCode,\n      getUserAccessCodes,\n      refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 580,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"m8OJeA/thn820aF3Qgjie0Y2NI4=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useNavigate","axios","jwtDecode","setupTokenRefresh","storeAuthToken","clearAuthToken","getCurrentUser","register","registerApi","login","loginApi","checkSubscription","checkSubscriptionApi","generateAccessCode","generateAccessCodeApi","redeemAccessCode","redeemAccessCodeApi","getAccessCodes","getAccessCodesApi","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","error","setError","success","setSuccess","navigate","console","log","checkUserLoggedIn","handleStorageChange","e","key","newValue","handleLogout","window","addEventListener","removeEventListener","token","localStorage","getItem","decoded","currentTime","Date","now","exp","cachedSubscriptionData","cachedData","JSON","parse","cacheError","response","data","userData","hasSubscription","hasAccessCode","subscription","subscriptionPlan","subscriptionStatus","status","subscriptionExpiry","expiryDate","generatedCodes","maxAllowedCodes","remainingCodes","accessCodeDetails","setTimeout","then","catch","err","tokenData","user_id","sub","role","Object","assign","tokenError","formData","username","email","password","substring","_error$response","_error$response$data","message","credentials","userResponse","userError","minimalUserData","headers","request","logout","retries","finalResponse","Promise","resolve","cachedSubscription","parsedData","prevUser","setItem","stringify","isActive","hasValidCode","result","successMsg","code","_response$data","errorMsg","_err$response","_err$response$data","details","toString","_err$response2","_err$response2$data","getUserAccessCodes","codes","Array","isArray","length","_error$response2","_error$response2$data","Provider","value","refreshAuth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Movie/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nimport { setupTokenRefresh, storeAuthToken, clearAuthToken, getCurrentUser, register as registerApi, login as loginApi, checkSubscription as checkSubscriptionApi, generateAccessCode as generateAccessCodeApi, redeemAccessCode as redeemAccessCodeApi, getAccessCodes as getAccessCodesApi } from '../api/backendApi';\n\n// Create auth context\nexport const AuthContext = createContext();\n\n// Provider component\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [success, setSuccess] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in on mount\n  useEffect(() => {\n    console.log(\"AuthContext mounted - checking login status\");\n    checkUserLoggedIn();\n    \n    // Listen for storage events (e.g., token changes in other tabs)\n    const handleStorageChange = (e) => {\n      if (e.key === 'token') {\n        if (e.newValue) {\n          console.log('Token updated in another tab - refreshing auth state');\n          checkUserLoggedIn();\n        } else {\n          console.log('Token removed in another tab - logging out');\n          handleLogout();\n        }\n      }\n    };\n    \n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Handle logout process\n  const handleLogout = () => {\n    setUser(null);\n    setIsAuthenticated(false);\n    clearAuthToken();\n  };\n\n  // Check if token exists and is valid\n  const checkUserLoggedIn = async () => {\n    setIsLoading(true);\n    console.log(\"Checking if user is logged in...\");\n    \n    const token = localStorage.getItem('token');\n    \n    if (!token) {\n      console.log(\"No token found - user is not logged in\");\n      setIsLoading(false);\n      return;\n    }\n    \n    try {\n      // Check if token is expired\n      const decoded = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n      \n      if (decoded.exp < currentTime) {\n        console.log(\"Token expired - logging out\");\n        clearAuthToken();\n        setIsAuthenticated(false);\n        setUser(null);\n        setIsLoading(false);\n        return;\n      }\n      \n      console.log(\"Token is valid - refreshing auth state\");\n      \n      // Ensure token is set in headers\n      setupTokenRefresh();\n      \n      // First check if we have cached subscription data\n      let cachedSubscriptionData = null;\n      try {\n        const cachedData = localStorage.getItem('vortextv_subscription_data');\n        if (cachedData) {\n          cachedSubscriptionData = JSON.parse(cachedData);\n          console.log(\"Found cached subscription data:\", cachedSubscriptionData);\n        }\n      } catch (cacheError) {\n        console.error(\"Error reading cached subscription data:\", cacheError);\n      }\n      \n      try {\n        // Get current user data\n        console.log(\"Fetching current user data\");\n        const response = await getCurrentUser();\n        console.log(\"User data retrieved successfully\", response.data);\n        \n        // Merge subscription data from cache into user object if available\n        let userData = response.data;\n        if (cachedSubscriptionData) {\n          userData = {\n            ...userData,\n            hasSubscription: cachedSubscriptionData.hasSubscription,\n            hasAccessCode: cachedSubscriptionData.hasAccessCode,\n            subscription: cachedSubscriptionData.subscription,\n            subscriptionPlan: cachedSubscriptionData.subscriptionPlan,\n            subscriptionStatus: cachedSubscriptionData.status,\n            subscriptionExpiry: cachedSubscriptionData.expiryDate,\n            generatedCodes: cachedSubscriptionData.generatedCodes || 0,\n            maxAllowedCodes: cachedSubscriptionData.maxAllowedCodes || 0,\n            remainingCodes: cachedSubscriptionData.remainingCodes || 0,\n            accessCodeDetails: cachedSubscriptionData.accessCodeDetails\n          };\n          console.log(\"Merged cached subscription data with user data\");\n        }\n        \n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Immediately after auth is established, trigger a subscription check in background\n        // This will update the cached data with fresh data from the server\n        setTimeout(() => {\n          console.log(\"Performing background subscription check after login\");\n          checkSubscription().then(() => {\n            console.log(\"Background subscription check completed\");\n          }).catch(err => {\n            console.error(\"Background subscription check failed:\", err);\n          });\n        }, 200);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n        \n        // If we can't get user data but have a valid token,\n        // try to extract basic info from the token itself\n        try {\n          const tokenData = {\n            user_id: decoded.sub,\n            role: decoded.role\n          };\n          console.log(\"Using token data as fallback:\", tokenData);\n          \n          // Merge with cached subscription data if available\n          if (cachedSubscriptionData) {\n            Object.assign(tokenData, {\n              hasSubscription: cachedSubscriptionData.hasSubscription,\n              hasAccessCode: cachedSubscriptionData.hasAccessCode,\n              subscription: cachedSubscriptionData.subscription,\n              subscriptionPlan: cachedSubscriptionData.subscriptionPlan,\n              subscriptionStatus: cachedSubscriptionData.status,\n              subscriptionExpiry: cachedSubscriptionData.expiryDate,\n              generatedCodes: cachedSubscriptionData.generatedCodes || 0,\n              maxAllowedCodes: cachedSubscriptionData.maxAllowedCodes || 0,\n              remainingCodes: cachedSubscriptionData.remainingCodes || 0,\n              accessCodeDetails: cachedSubscriptionData.accessCodeDetails\n            });\n            console.log(\"Merged cached subscription data with token data\");\n          }\n          \n          setUser(tokenData);\n          setIsAuthenticated(true);\n          \n          // Try to get fresh subscription data\n          setTimeout(() => checkSubscription(), 300);\n        } catch (tokenError) {\n          console.error('Failed to extract user data from token:', tokenError);\n          clearAuthToken();\n          setUser(null);\n          setIsAuthenticated(false);\n        }\n      }\n    } catch (error) {\n      console.error('Error decoding/validating token:', error);\n      clearAuthToken();\n      setUser(null);\n      setIsAuthenticated(false);\n    }\n    \n    setIsLoading(false);\n  };\n\n  // Register user\n  const register = async (formData) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting to register with:', { \n        username: formData.username,\n        email: formData.email,\n        password: formData.password ? '*****' : 'empty'\n      });\n      \n      const response = await registerApi(formData);\n      console.log('Registration response:', response.data);\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        setError('Registration successful but no authentication token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      // Set user data from the response\n      const userData = {\n        user_id: response.data.user_id,\n        username: response.data.username || formData.username,\n        email: response.data.email || formData.email,\n        role: response.data.role || 'user' // Default role for new registrations\n      };\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      navigate('/subscriptions');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      setError(error.response?.data?.message || 'Registration failed');\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async (credentials) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('Attempting login with credentials:', { \n        username: credentials.username, \n        password: credentials.password ? '*****' : 'empty' \n      });\n      \n      // Clear any existing tokens before login attempt\n      clearAuthToken();\n      \n      // Use backendApi which has token interceptor setup\n      const response = await loginApi(credentials);\n      console.log('Login response received:', { status: response.status });\n      \n      const token = response.data.token;\n      console.log('Token received:', token ? `${token.substring(0, 15)}...` : 'No token');\n      \n      if (!token) {\n        console.error('No token received in login response');\n        setError('Authentication failed: No token received');\n        setIsLoading(false);\n        return false;\n      }\n      \n      // Store token consistently\n      storeAuthToken(token);\n      \n      try {\n        // Get current user data after login with proper authorization header\n        console.log('Fetching user data after login');\n        const userResponse = await getCurrentUser();\n        \n        console.log('User data received:', userResponse.data);\n        const userData = userResponse.data;\n        setUser(userData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on user role\n        if (userData.role === 'admin' || userData.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      } catch (userError) {\n        console.error('Error fetching user data after login:', userError);\n        \n        // Even if user fetch fails, we're still logged in with a token\n        // Set minimal user data based on the login response\n        const minimalUserData = {\n          user_id: response.data.user_id,\n          username: response.data.username,\n          email: response.data.email,\n          role: response.data.role\n        };\n        \n        console.log('Setting minimal user data:', minimalUserData);\n        setUser(minimalUserData);\n        setIsAuthenticated(true);\n        \n        // Redirect based on role from login response\n        if (response.data.role === 'admin' || response.data.role === 'superadmin') {\n          navigate('/admin');\n        } else {\n          navigate('/browse');\n        }\n        \n        return true;\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      // Enhanced error logging\n      if (error.response) {\n        console.error('Error response data:', error.response.data);\n        console.error('Error response status:', error.response.status);\n        console.error('Error response headers:', error.response.headers);\n        setError(error.response.data.message || 'Login failed');\n      } else if (error.request) {\n        console.error('Error request:', error.request);\n        setError('No response received from server. Please try again later.');\n      } else {\n        console.error('Error message:', error.message);\n        setError(error.message || 'Login failed');\n      }\n      \n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    handleLogout();\n    navigate('/login');\n  };\n\n  // Check if user has active subscription\n  const checkSubscription = async () => {\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot check subscription');\n      return false;\n    }\n    \n    // Add a retry mechanism for reliability\n    let retries = 2;\n    let success = false;\n    let finalResponse = null;\n    \n    while (retries >= 0 && !success) {\n      try {\n        console.log(`Checking subscription (${2-retries}/2 attempt)`);\n        const response = await checkSubscriptionApi();\n        success = true;\n        finalResponse = response;\n        console.log('Subscription check successful:', response.data);\n      } catch (error) {\n        console.error(`Attempt ${2-retries}/2 failed:`, error);\n        retries--;\n        if (retries >= 0) {\n          // Wait before retrying (500ms, then 1000ms)\n          await new Promise(resolve => setTimeout(resolve, 500 * (3 - retries)));\n        }\n      }\n    }\n    \n    if (!success || !finalResponse) {\n      console.error('All subscription check attempts failed');\n      \n      // Try to use cached data if available\n      const cachedSubscription = localStorage.getItem('vortextv_subscription_data');\n      if (cachedSubscription) {\n        try {\n          const parsedData = JSON.parse(cachedSubscription);\n          console.log('Using cached subscription data:', parsedData);\n          \n          // Update user with cached data\n          setUser(prevUser => ({\n            ...prevUser,\n            hasSubscription: parsedData.hasSubscription,\n            hasAccessCode: parsedData.hasAccessCode,\n            subscription: parsedData.subscription,\n            subscriptionPlan: parsedData.subscriptionPlan,\n            subscriptionStatus: parsedData.status,\n            subscriptionExpiry: parsedData.expiryDate,\n            generatedCodes: parsedData.generatedCodes || 0,\n            maxAllowedCodes: parsedData.maxAllowedCodes || 0,\n            remainingCodes: parsedData.remainingCodes || 0,\n            accessCodeDetails: parsedData.accessCodeDetails\n          }));\n          \n          return parsedData.hasSubscription && parsedData.status === 'active';\n        } catch (e) {\n          console.error('Error parsing cached subscription data:', e);\n        }\n      }\n      \n      return false;\n    }\n    \n    const data = finalResponse.data;\n    \n    // Cache the subscription data for later use if needed\n    localStorage.setItem('vortextv_subscription_data', JSON.stringify(data));\n    \n    // Update user data with subscription info\n    setUser(prevUser => ({\n      ...prevUser,\n      hasSubscription: data.hasSubscription,\n      hasAccessCode: data.hasAccessCode,\n      subscription: data.subscription,\n      // Add more detailed subscription data\n      subscriptionPlan: data.subscriptionPlan,\n      subscriptionStatus: data.status,\n      subscriptionExpiry: data.expiryDate,\n      generatedCodes: data.generatedCodes || 0,\n      maxAllowedCodes: data.maxAllowedCodes || 0,\n      remainingCodes: data.remainingCodes || 0,\n      accessCodeDetails: data.accessCodeDetails\n    }));\n    \n    // Check if subscription is active (not expired)\n    const isActive = data.hasSubscription && \n                    data.status === 'active' && \n                    new Date(data.expiryDate) > new Date();\n    \n    // Or check if access code is valid\n    const hasValidCode = data.hasAccessCode &&\n                        data.accessCodeDetails &&\n                        new Date(data.accessCodeDetails.expiryDate) > new Date();\n    \n    const result = isActive || hasValidCode;\n    console.log(`Subscription check result: ${result ? 'Active' : 'Inactive'}`);\n    return result;\n  };\n\n  // Generate an access code for the user's subscription\n  const generateAccessCode = async () => {\n    setIsLoading(true);\n    console.log('AuthContext: Starting access code generation');\n    \n    // Make sure subscription data is up-to-date before generating\n    try {\n      if (!isAuthenticated) {\n        console.error('AuthContext: Cannot generate code - not authenticated');\n        setError('Authentication required');\n        return {\n          success: false,\n          error: 'Authentication required'\n        };\n      }\n\n      // Check subscription status directly from user object\n      if (!user) {\n        console.error('AuthContext: Cannot generate code - no user data');\n        setError('User data unavailable');\n        return {\n          success: false,\n          error: 'User data unavailable'\n        };\n      }\n      \n      if (!user.hasSubscription) {\n        console.error('AuthContext: Cannot generate code - no active subscription');\n        setError('No active subscription found');\n        return {\n          success: false,\n          error: 'No active subscription found'\n        };\n      }\n\n      // Debug the request before sending\n      console.log('AuthContext: Making API call to generate access code');\n      \n      // Make the API request with specific headers and timeout\n      const response = await generateAccessCodeApi();\n      console.log('AuthContext: Access code API response:', response.data);\n\n      if (response.data && response.data.success) {\n        const successMsg = `Access code generated: ${response.data.code}`;\n        console.log('AuthContext: ' + successMsg);\n        setSuccess(successMsg);\n        \n        // Update subscription data in user context\n        setUser(prevUser => ({\n          ...prevUser,\n          remainingCodes: response.data.remainingCodes,\n          generatedCodes: response.data.generatedCodes\n        }));\n        \n        // Return the generated code data\n        return response.data;\n      } else {\n        const errorMsg = response.data?.error || 'Failed to generate access code';\n        console.error('AuthContext: Access code generation failed:', errorMsg);\n        setError(errorMsg);\n        return {\n          success: false,\n          error: errorMsg\n        };\n      }\n    } catch (err) {\n      console.error('AuthContext: Error generating access code:', err);\n      const errorMsg = err.response?.data?.error || err.message || 'Failed to generate access code';\n      setError(errorMsg);\n      return {\n        success: false,\n        error: errorMsg,\n        details: err.toString()\n      };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Redeem an access code\n  const redeemAccessCode = async (code) => {\n    setIsLoading(true);\n    try {\n      if (!isAuthenticated) {\n        setError('Authentication required');\n        return false;\n      }\n\n      const response = await redeemAccessCodeApi(code);\n\n      if (response.data && response.data.success) {\n        setSuccess('Access code redeemed successfully');\n        // Update user's subscription status after redemption\n        await checkSubscription();\n        return response.data.accessCodeDetails;\n      } else {\n        setError(response.data.error || 'Failed to redeem access code');\n        return null;\n      }\n    } catch (err) {\n      console.error('Error redeeming access code:', err);\n      setError(err.response?.data?.error || 'Failed to redeem access code');\n      return null;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get all user generated access codes\n  const getUserAccessCodes = async () => {\n    // Guard clause - check if authenticated and has subscription\n    if (!isAuthenticated) {\n      console.log('Not authenticated, cannot get access codes');\n      return { success: false, codes: [], error: 'Authentication required' };\n    }\n    \n    if (!user || !user.hasSubscription) {\n      console.log('User has no subscription, cannot get access codes');\n      return { success: false, codes: [], error: 'No active subscription' };\n    }\n    \n    try {\n      console.log('Fetching access codes from API');\n      const response = await getAccessCodesApi();\n      \n      // Validate the response structure\n      if (response && response.data) {\n        // Check if codes array exists, if not default to empty array\n        const codes = Array.isArray(response.data.codes) ? response.data.codes : \n                     (Array.isArray(response.data) ? response.data : []);\n        \n        console.log(`Retrieved ${codes.length} access codes`);\n        return { success: true, codes: codes };\n      } else {\n        console.error('Invalid response format from access codes API');\n        return { success: false, codes: [], error: 'Invalid response format' };\n      }\n    } catch (error) {\n      console.error('Error fetching access codes:', error);\n      return { \n        success: false, \n        codes: [], \n        error: error.response?.data?.message || error.message || 'Error fetching access codes'\n      };\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        isAuthenticated,\n        isLoading,\n        error,\n        success,\n        register,\n        login,\n        logout,\n        checkSubscription,\n        generateAccessCode,\n        redeemAccessCode,\n        getUserAccessCodes,\n        refreshAuth: checkUserLoggedIn // Expose this to allow manual refresh\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}